/*2025.04.16 18:09 IMM*/

function spy(func) {
  // Массив для хранения всех вызовов
  /*Rest-параметр (...args)
    Rest-параметр используется в параметрах функции для сбора всех переданных
    аргументов в массив. Это позволяет работать с переменным количеством аргументов.*/
  function wrapper(...args) {
    // Сохраняем аргументы вызова в массиве calls
    wrapper.calls.push(args);   //запись в свойство calls массива args

    // Вызываем оригинальную функцию
    /*Распаковка (Spread)
      Распаковка (spread) используется для разбиения массива или объекта на отдельные элементы,
      которые передаются в другую структуру данных (например, в функцию, массив или объект).*/
    return func(...args);
  }

  // Добавляем массив для хранения вызовов на обёртку
  wrapper.calls = [];

  return wrapper;
}
/*
Как отличить:
Rest-параметр используется в параметре функции. Это всегда будет массив, собравший все переданные аргументы.

function example(...args) { // Здесь это rest-параметр
  console.log(args);  // args — это массив всех переданных аргументов
}
Spread (распаковка) используется для распаковки массива или объекта в разных контекстах: 
при передаче аргументов в функцию, создании нового массива, копировании объекта и т. д.

let arr = [1, 2, 3];
console.log(...arr);  // Распаковывает элементы массива (выводит 1 2 3)
Резюме:
Да, контекст использования оператора ... определяет, является ли он rest-параметром 
или оператором распаковки (spread).

Rest-параметр всегда используется в параметрах функции для сбора аргументов в массив.

Spread используется для распаковки элементов из массива или объекта в другие структуры данных.

Так что, чтобы точно понять, что делает ..., нужно смотреть, где он используется: в параметре
функции (rest) или в другом контексте (spread).
*/

// Пример использования:
function work(a, b) {
  console.log(a + b); // произвольная функция, которая что-то делает с аргументами
}

work = spy(work); // оборачиваем функцию work в spy

work(1, 2); // 3
work(4, 5); // 9

// Выводим все вызовы
for (let args of work.calls) {
  console.log('call:' + args.join()); // "call:1,2", "call:4,5"
}
