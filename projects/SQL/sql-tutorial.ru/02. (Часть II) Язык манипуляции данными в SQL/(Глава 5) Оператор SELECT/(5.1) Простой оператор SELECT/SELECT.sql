/*2020.10.26 22:50 IMM*/

--Простой оператор SELECT
	
/*	
Оператор SELECT осуществляет выборку из базы данных и имеет наиболее сложную структуру среди всех операторов языка SQL. 
Практически любой пользователь баз данных в состоянии написать простейший оператор SELECT типа
*/

    SELECT * FROM PC;

/*
который осуществляет выборку всех записей из объекта БД табличного типа с именем РС. При этом столбцы и строки 
результирующего набора не упорядочены. Чтобы упорядочить поля результирующего набора, их следует перечислить через
запятую в нужном порядке после слова SELECT:
*/

    SELECT price, speed, hd, ram, cd, model, code 
    FROM PC;
	
/*
Ниже приводится результат выполнения этого запроса.

600 	500 	5 	64 	12x 	1232 	1
850 	750 	14 	128 40x 	1121 	2
600 	500 	5 	64 	12x 	1233 	3
850 	600 	14 	128 40x 	1121 	4
850 	600 	8 	128 40x 	1121 	5
950 	750 	20 	128 50x 	1233 	6
400 	500 	10 	32 	12x 	1232 	7
350 	450 	8 	64 	24x 	1232 	8
350 	450 	10 	32 	24x 	1232 	9
350 	500 	10 	32 	12x 	1260 	10
980 	900 	40 	128 40x 	1233 	11

ВЕРТИКАЛЬНУЮ проекцию таблицы РС можно получить, если перечислить только необходимые поля. Например, чтобы получить 
информацию только о частоте процессора и объеме оперативной памяти компьютеров, следует выполнить запрос:
*/

    SELECT speed, ram 
    FROM PC;
	
/*
который вернет следующие данные:

500 	64
750 	128
500 	64
600 	128
600 	128
750 	128
500 	32
450 	64
450 	32
500 	32
900 	128

Следует отметить, что ВЕРТИКАЛЬНАЯ выборка может содержать дубликаты строк в том случае, если она не содержит потенциального
ключа, однозначно определяющего запись. В таблице РС потенциальным ключом является поле code. Поскольку это поле отсутствует в 
запросе, в приведенном выше результирующем наборе имеются дубликаты строк (например, строки 1 и 3). Если требуется получить 
только уникальные строки (скажем, нас интересуют только различные комбинации скорости процессора и объема памяти, а не
характеристики всех имеющихся компьютеров), то можно использовать ключевое слово DISTINCT:
*/

    SELECT DISTINCT speed, ram 
    FROM PC;
	
/*
что даст следующий результат:

450 	32
450 	64
500 	32
500 	64
600 	128
750 	128
900 	128

Помимо DISTINCT может применяться также ключевое слово ALL (все строки), которое принимается по умолчанию.

Чтобы упорядочить строки результирующего набора, можно выполнить сортировку по любому количеству полей, указанных в предложении
SELECT. Для этого используется предложение ORDER BY список полей, являющееся всегда последним предложением в операторе SELECT. 
При этом в списке полей могут указываться как имена полей, так и их порядковые позиции в списке предложения SELECT. Так, если
требуется упорядочить результирующий набор по объему оперативной памяти в порядке убывания, можно записать:
*/

    SELECT DISTINCT speed, ram 
    FROM PC 
    ORDER BY ram DESC;

--или

    SELECT DISTINCT speed, ram 
    FROM PC 
    ORDER BY 2 DESC;

/*
Результат, приведенный ниже, будет, естественно, одним и тем же.

speed 	ram
600 	128
750 	128
800		128
900 	128
450 	64
500 	64
450 	32
500 	32

Сортировку можно проводить по возрастанию (параметр ASC принимается по умолчанию) или по убыванию (параметр DESC).

Примечание:

Не рекомендуется в приложениях использовать запросы с сортировкой по номерам столбцов. Это связано с тем, что со временем 
структура таблицы может измениться, например, в результате добавления/удаления столбцов. Как следствие, запрос типа
*/

    SELECT *
    FROM PC
    ORDER BY 3;

--может давать совсем другую последовательность или вообще вызывать ошибку, ссылаясь на отсутствующий столбец.

--Сортировка по двум полям

    SELECT DISTINCT speed, ram 
    FROM PC 
    ORDER BY ram DESC, speed DESC;

--даст следующий результат:

/*
speed 	ram
900 	128
800		128
750 	128
600 	128
500 	64
450 	64
500 	32
450 	32

ГОРИЗОНТАЛЬНУЮ выборку реализует предложение WHERE предикат, которое записывается после предложения FROM. При этом в 
результирующий набор попадут только те строки из источника записей, для каждой из которых значение предиката равно TRUE.
То есть предикат проверяется для каждой записи. Например, запрос «получить информацию о частоте процессора и объеме 
оперативной памяти для компьютеров с ценой ниже $500» можно сформулировать следующим образом:
*/

    SELECT DISTINCT speed, ram 
    FROM PC 
    WHERE price < 500 
    ORDER BY 2 DESC;

/*
speed 	Ram
450 	64
450 	32
500 	32

В последнем запросе был применен предикат сравнения с использованием операции сравнения «<» (меньше чем). Кроме этой
операции сравнения могут использоваться: «=» (равно), «>» (больше), «>=» (больше или равно), «<=» (меньше или равно) и «<>» (не равно). 
Выражения в предикатах сравнения могут содержать константы и любые поля из таблиц, указанных в предложении FROM. Символьные строки
и константы типа дата/время записываются в апострофах.

Примеры простых предикатов сравнения:

предикат 			описание
price < 1000 		Цена меньше 1000
type = ‘laptop’ 	Типом продукции является портативный компьютер
cd = ‘24x’ 			24-скоростной CD-ROM
color <> ’y’ 		Не цветной принтер
ram – 128 > 0 		Объем оперативной памяти свыше 128 Мбайт
Price <= speed*2 	Цена не превышает удвоенной частоты процессора 

Сортировку можно выполнять даже по столбцам, отсутствующим в списке SELECT. Естественно, эти столбцы должны присутствовать на выходе 
предложения FROM. Например, чтобы вывести список моделей PC, упорядоченный по убыванию цены, можно написать
*/

    SELECT model
	FROM PC 
    ORDER BY price DESC;

/*
Обратите внимание, что сама цена (price) не выводится запросом. Исключением является неоднозначная ситуация, возникающая при 
исключении дубликатов. Так запрос

    SELECT DISTINCT model
	FROM PC 
    ORDER BY price DESC;

уже вызовет ошибку:

ORDER BY items must appear in the select list if SELECT DISTINCT is specified.
(Элементы ORDER BY должны входить в список выбора, если указывается SELECT DISTINCT.)

По той же причине не будет работать запрос с группировкой

    SELECT model
	FROM PC
    GROUP BY model
    ORDER BY price DESC;

Column "PC.price" is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause.
(Столбец "PC.price" недопустим в предложении ORDER BY, так как он не содержится в агрегатной функции или предложении GROUP BY.)

Однако если неоднозначность устранить (выполнить сортировку по какому-либо агрегатному значению для группы), то можно "подправить" запрос:
*/

    SELECT model
	FROM PC
    GROUP BY model
    ORDER BY MAX(price) DESC;

/*
Примечание:

Все приведенные здесь запросы (в том числе ошибочные) будут работать под MySQL, которая сама устраняет неоднозначность. Спросите как? 
Загляните в документацию MySQL. :-)
*/

