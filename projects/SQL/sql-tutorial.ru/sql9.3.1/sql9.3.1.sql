/*2024.09.27 15:03 IMM*/
/*2025.01.16 11:12 IMM*/

--CROSS APPLY / OUTER APPLY
--Оператор CROSS APPLY появился в SQL Server 2005. Он позволяет выполнить соединение двух табличных выражений. 
--При этом каждая строка из левой таблицы сочетается с каждой строкой из правой.
--Давайте попробуем разобраться в том, какие преимущества дает нам использование этого нестандартного оператора.
--Первый пример.

SELECT * FROM Product
SELECT * FROM Laptop

SELECT * FROM
Product
CROSS APPLY
Laptop;

--Мы получили просто декартово произведение таблиц Product и Laptop. Аналогичный 
--результат мы можем получить с помощью следующих стандартных запросов:

SELECT * FROM
Product
CROSS JOIN
Laptop;

--или

SELECT * FROM
Product, Laptop;

--Поставим теперь более осмысленную задачу.
--Для каждого ноутбука дополнительно вывести имя производителя.
--Эту задачу мы можем решить с помощью обычного соединения:

SELECT p.maker, l.* FROM
Laptop l JOIN Product p ON l.model = p.model

--С помощью CROSS APPLY решение этой же задачи можно написать так:

SELECT P.maker, L1.* FROM
Product P
CROSS APPLY
(SELECT * FROM Laptop L WHERE P.model= L.model) L1;		--коррелирующий подзапрос

--"И что тут нового"? - спросите вы. Запрос стал даже более громоздким. Пока да, можно согласиться.
--Но уже здесь можно заметить весьма важную вещь, которая отличает CROSS APPLY от других видов 
--соединений. А именно, мы используем коррелирующий подзапрос в предложении FROM, передавая в него
--значения из левого табличного выражения. В данном примере это значения из столбца P.model. Т.е.
--для каждой строки из левой таблицы правая таблица будет своя.
--Поняв это, мы можем воспользоваться данными преимуществами. Рассмотрим следующую задачу.
--Для каждого ноутбука дополнительно вывести максимальную цену среди ноутбуков того же производителя.
--Эту задачу мы можем решить с помощью коррелирующего подзапроса в предложении SELECT:

SELECT *, (SELECT MAX(price) FROM Laptop L2
JOIN Product P1 ON L2.model=P1.model
WHERE maker = (SELECT maker FROM Product P2 WHERE P2.model= L1.model)) max_price
FROM Laptop L1;