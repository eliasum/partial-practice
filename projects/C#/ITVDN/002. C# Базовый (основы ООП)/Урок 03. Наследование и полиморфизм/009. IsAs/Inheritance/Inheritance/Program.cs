using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

// операторы is и as

namespace Inheritance
{
    class ClassA { /* ... */ }

    class ClassB : ClassA { /* ... */ }

    class Program
    {
        static void Main(string[] args)
        {
            ClassB b = new ClassB();
            ClassA a = null;

            //--------------------------------------------is----------------------------------------------------
            // оператор is проверяет совместимость объекта с заданным типом
            // Если предоставленный объект может быть приведен к предоставленному типу не вызывая исключение,
            // выражение is принимает значение true/

            // Например, в следующем коде определяется, является ли объект экземпляром типа A или типа, производного от A:
            if (b is ClassA)
            {
                a = (ClassA)b;
            }
            else
            {
                a = null;
            }

            //--------------------------------------------as----------------------------------------------------
            // оператор as используется для выполнения преобразований между совместимыми ссылочными типами
            // оператор as подобен оператору приведения. Однако, если преобразование невозможно, 
            // as возвращает значение null, а не вызывает исключение.

            // В общем виде логика работы оператора as представляет собой механизм использования оператора is,
            // только в сокращенном виде

            a = b as ClassA;

            Console.ReadKey();
        }
    }
}
