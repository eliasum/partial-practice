/*2022.10.04 11:50 IMM*/
using System;
using System.Threading;

// Потоки.

namespace Threads
{
    class Program
    {
        /* все статические методы находятся в области объекта, а не экземпляра, т.е. 
        статический метод может быть только один, но только не при работе с потоками,
        когда строится копия метода для каждого потока.
        Статический метод, который планируется выполнять одновременно в главном 
        (первичном) и во вторичном потоках.
        */
        static void WriteSecond()
        {
            // CLR назначает каждому потоку свой стек и методы имеют свои собственные локальные переменные.
            // Отдельный экземпляр переменной counter создается в стеке каждого потока, 
            // поэтому для каждого потока выводятся, свои значения counter - 0,1,2.
            int counter = 0;

            while (counter < 10)
            {
                //Thread.Sleep(500);
                Console.WriteLine("Thread Id {0}, counter = {1}", Thread.CurrentThread.GetHashCode(), counter);
                counter++;
            }
        }

        static void Main()
        {
            /*
            Делегат - это объект указывающий на метод.
            Здесь происходит передача метода WriteSecond объекту thread типа Thread
            через делегат writeSecond типа ThreadStart (сообщаем метод WriteSecond()
            с делегатом типа ThreadStart). При создании нового потока будет
            выполняться код из метода WriteSecond().
            Т.е. метод, код которого должен выполняться в другом потоке, передается в 
            качестве аргумента экземпляру делегата ThreadStart, который в свою очередь 
            передается в качестве аргумента экземпляру класса Thread:
            метод --> экземпляр делегата ThreadStart --> объект Thread
            */
            // Работа вторичного потока, асинхронно (здесь предположение делегата)
            Thread thread = new Thread(WriteSecond);
            thread.Start();

            // Работа первичного потока, синхронно
            WriteSecond();


            // Delay.
            Console.ReadKey();
        }
    }
}
