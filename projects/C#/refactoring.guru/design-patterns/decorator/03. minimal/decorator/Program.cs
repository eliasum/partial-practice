/*2025.03.24 17:06 IMM*/

using System;

namespace SimpleDecoratorExample
{
    // Конкретный компонент с базовой реализацией
    // Это класс, который представляет исходный объект с базовой функциональностью.
    class ConcreteComponent
    {
        // Метод, который выполняет основное действие компонента
        public string Operation()
        {
            return "Конкретный компонент"; // Возвращает строку с базовым поведением
        }
    }

    // Декоратор, который добавляет поведение
    // Этот класс служит для добавления дополнительных возможностей к базовому компоненту.
    class ConcreteDecorator
    {
        // Переменная для хранения объекта, который мы будем декорировать
        private readonly ConcreteComponent _component;

        // Конструктор, который принимает исходный компонент
        public ConcreteDecorator(ConcreteComponent component)
        {
            _component = component; // Сохраняем компонент, который будем оборачивать
        }

        // Переопределение метода, которое добавляет дополнительную логику
        public string Operation()
        {
            // Возвращаем строку, добавляя новое поведение поверх базового компонента
            return $"Декорированный компонент({_component.Operation()})";
            /*
            оператор {} называется синтаксисом интерполяции строк (или строчной 
            интерполяцией), а сама операция называется интерполяцией строк.

            Что происходит:
            Оператор {} используется для встраивания значений переменных, 
            выражений или методов внутри строки.
            Операция, которая выполняется внутри {}, вычисляет результат, 
            который затем вставляется в итоговую строку.
            Объяснение:
            Интерполяция строк — это способ вставки значений переменных или 
            результатов выражений прямо в строку. Это значительно упрощает 
            создание строк с динамическим содержимым.

            Способы работы со строками в C#:
            - Интерполяция строк — это современный и читаемый способ.
            - Конкатенация строк — классический метод, который понятен и прост, но может быть 
            менее эффективен в случае большого количества строк.
            - String.Format() — подходит для форматирования строк с позиционными плейсхолдерами.
            - String.Concat() — более эффективен, чем конкатенация с использованием +.
            - StringBuilder — лучший выбор при множественных операциях конкатенации, особенно в циклах.
            - String.Join() — идеально подходит для объединения коллекции строк с разделителями.
            */
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Создаем базовый компонент
            var component = new ConcreteComponent();

            // Показываем клиенту простой компонент
            Console.WriteLine("Клиент: Я получаю простой компонент:");
            Console.WriteLine(component.Operation()); // "Конкретный компонент"
            Console.WriteLine();

            // Оборачиваем компонент в декоратор, добавляем новое поведение
            var decoratedComponent = new ConcreteDecorator(component);

            // Показываем клиенту декорированный компонент
            Console.WriteLine("Клиент: Теперь у меня есть декорированный компонент:");
            Console.WriteLine(decoratedComponent.Operation()); // "Декорированный компонент(Конкретный компонент)"

            // Ожидание ввода от пользователя, чтобы окно консоли не закрылось сразу
            Console.ReadKey();
        }
    }
}
/*
Как работает паттерн "Декоратор" в этом примере:

Основная идея паттерна: Декоратор позволяет добавить функциональность 
существующему объекту без изменения его исходного кода.

В данном случае, базовый объект ConcreteComponent возвращает строку 
"Конкретный компонент". Когда мы оборачиваем его в декоратор 
ConcreteDecorator, метод Operation в декораторе модифицирует 
результат, добавляя текст "Декорированный компонент(...)".

Таким образом, исходный объект остаётся без изменений, но мы 
можем изменять его поведение, оборачивая его в разные декораторы.
*/
