;



function alphaBack(prop){
	var dA = prop.obj.alpha;
	 
	prop.timing = prop.timing || 500;
	prop.obj.alpha = prop.from || 0;
	prop.to = prop.to || dA;
	prop.easing = prop.easing || ease("cubicOut");
	prop.delay = prop.delay || 0;
	
	
	var tw = Tween(prop.obj)
		.wait(prop.delay)
		.to({alpha:prop.to}, prop.timing, prop.easing);
		
	if(prop.fnc){	                                     
		tw.call(fnc);
	}
		
};

function bangBack(prop){
	
	prop.timing = prop.timing || 1200;
	prop.mult = prop.mult || 3;
	prop.obj.scaleX = prop.obj.scaleY = prop.obj.scaleX*prop.mult;
	prop.to = (prop.to == undefined) ? prop.obj.scaleX/prop.mult : (prop.obj.scaleY/prop.mult)*prop.to;
	prop.easing = prop.easing ||  ease ("elasticOut");
	prop.delay = prop.delay || 0;
	
	var tw = Tween(prop.obj)
		.wait(prop.delay)
		.to({scaleX:prop.to, scaleY:prop.to}, prop.timing, prop.easing);
		
	if(prop.fnc){	                                     
		tw.call(fnc);
	}

};



function def(obj) {
	if (!inited) {
		obj.defaults = {};
		obj.defaults.x = obj.x;
		obj.defaults.y = obj.y;
		obj.defaults.alpha = obj.alpha;
		obj.defaults.visible = obj.visible;
		obj.defaults.scaleX = obj.scaleX;
		obj.defaults.scaleY = obj.scaleY;
	} else {
		createjs.Tween.removeTweens(obj);

		obj.x = obj.defaults.x;
		obj.y = obj.defaults.y;
		obj.alpha = obj.defaults.alpha;
		obj.visible = obj.defaults.visible;
		obj.scaleX = obj.defaults.scaleX;
		obj.scaleY = obj.defaults.scaleY;

		//obj.gotoAndStop(0);

	}

}

function showAgeSign(delay){
	def(root.age);
	alphaBack({obj: root.age, delay: delay, easing:  Ease.linear, timing: 1.0*1000});
}
function hideAgeSign(delay){
	Tween(root.age).wait(delay).to({alpha:0}, 0.6*1000, Ease.linear);
}

function cacheObject (obj, sc)
{
	sc = sc || 2 * obj.scaleX;
	var rect = obj.nominalBounds;
	if (rect)
	{
		obj.cache(Math.floor(rect.x), Math.floor(rect.y), Math.ceil(rect.width), Math.ceil(rect.height), sc);
	}
};

function animateAppearing(prop){

	var list = Array.isArray(prop.obj)? prop.obj : [prop.obj];
	
	prop.delay = prop.delay || delayL*1000 || 0.0;
	prop.interval = prop.interval || 0.1*1000;
	
	prop.timing = prop.timing || 0.8*1000;
	
	prop.shiftX = prop.shiftX || 0;
	
	prop.shiftY = prop.shiftY || bH/4;
	
	prop.easing = prop.easing || Ease.cubicOut;
	
	for(var p in list){
		list[p].y0 = list[p].y;
		list[p].x0 = list[p].x;
		list[p].x = list[p].x0 + prop.shiftX;
		list[p].y = list[p].y0 + prop.shiftY;
		
		
		alphaBack({obj: list[p], delay: prop.delay + p*prop.interval, timing: prop.timing/2, easing: Ease.cubicIn});
		var tw = Tween(list[p])
			.wait(prop.delay + p*(prop.interval))
			.to({x: list[p].x0, y: list[p].y0}, prop.timing, prop.easing);
			
		if(prop.fnc){	                                     
			tw.call(fnc);
		}
	}
		
};