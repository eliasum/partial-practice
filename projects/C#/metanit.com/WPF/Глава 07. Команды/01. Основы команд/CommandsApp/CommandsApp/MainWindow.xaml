<!--
2021.08.30 15:18 IMM
 
I    
    
Команды
    
Основы команд

    В WPF кроме обработки событий приложение может взаимодействовать с пользователем с помощью команд.
    Команды представляют механизм выполнения какой-нибудь задачи, например, копирования текста - когда
    мы нажимаем Ctrl+C, то мы копируем текст в буффер. В процессе копирования выполняется ряд действий, 
    и все вместе эти действия объединяются в одну команду. Использование команд помогает нам сократить 
    объем кода и использовать одну и ту же команду для НЕСКОЛЬКИХ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ в различных 
    местах программы. Таким образом, КОМАНДЫ ПОЗВОЛЯЮТ АБСТРАГИРОВАТЬ НАБОР ДЕЙСТВИЙ ОТ КОНКРЕТНЫХ 
    СОБЫТИЙ конкретных элементов.

    В некотором роде команды в WPF являются реализацией общераспространенного паттерна Команда 
    (https://metanit.com/sharp/patterns/3.3.php).

    Модель команд в WPF состоит из четырех аспектов:

        - Сама команда, которая представляет выполняемую задачу

        - Привязка команд, которая связывает команду с определенной логикой приложения

        - Источник команды - элемент пользовательского интерфейса, который запускает команду
          (например, кнопка, по нажатию который выполняется команда)

        - Цель команды - элемент интерфейса, на котором выполняется команда

Команда

Все команды реализуют интерфейс System.Window.Input.ICommand:
	
public interface ICommand
{
    event EventHandler CanExecuteChanged;
    void Execute (object parameter);
    bool CanExecute (object parameter);
}

Метод Execute предназначен для хранения логики команды. Функция CanExecute возвращает true,
    если команда включена и доступна для использования, и false, если команда отключена.
    Событие CanExecuteChanged вызывается при изменении состояния команды.

В WPF этот интерфейс реализован встроенным классом System.Windows.Input.RoutedCommand, который
    является базовым для всех встроенных команд. Поэтому, если нам потребуется создать свой класс
    команды, мы можем либо реализовать ICommand, либо унаследовать свой класс команды от RoutedCommand.

WPF уже обладает большим набором встроенных команд. Все они представляют объекты класса 
    RoutedUICommand, который является производным от RoutedCommand.

Все встроенные команды объединяются в семь групп, и каждую такую группу представляет отдельный 
    статический класс. А отдельные команды реализованы как статические свойства этих классов:

    - Общие команды приложения представлены классом ApplicationCommands. Это команды: 
    CancelPrint (Отменить печать), Close (Закрыть), ContextMenu (Конекстное меню), Copy (Копировать),
    CorrectionList (Список исправлений), Cut (Вырезать), Delete (Удалить), Find (Найти), Help (Справка),
    New (Создать), Open (Открыть), Paste (Вставить), Prit (Печать), PrintPreview (Предварительный просмотр),
    Properties (Свойства), Redo (Повторить), Replace (Заменить), Save (Сохранить), SaveAs (Сохранить как), 
    SelectAll (Выделить все), Stop (Остановить), Undo (Отменить) и т.д.

    - Команды навигации применяются для навигации по содержимому, например, в браузерных приложениях. Они 
    представлены классом NavigationCommands: BrowseBack (Назад), BrowseForward (Вперед), BrowseHome 
    (Домой / На главную страницу), BrowseStop (Остановить), Favorites (Избранное), FirstPage (Первая страница),
    GoToPage (Переход), LastPage (Последняя страница), NextPage (Следующая страница), PreviousPage (Предыдущая 
    страница), Refresh (Обновить) и т.д.

    - Команды компонентов интерфейса используются для перемещения и выделения содержимого элементов управления. 
    Они представлены классом ComponentCommands: MoveDown (Переместить курсор вниз), MoveLeft (Переместить курсор
    влево), MoveRight (Переместить курсор вправо), MoveUp (Переместить курсор вверх), ScrollPageDown (Прокрутить
    вниз), SelectToEnd (Прокрутить вверх) и т.д.

    - Команды редактирования документов представлены классом EditingCommands: AllignCenter (Выравнивание по
    центру), DecreaseFontSize (Уменьшение высоты шрифта), MoveDownByLine (Переход на строку вниз) и т.д.

    - Команды для управления мультимедиа представлены классом MediaCommands: DecreaseVolume (Уменьшить громкость),
    Play (Воспроизвести), Rewind (Перемотка), Record (Запись)

    - Системные команды представлены классом SystemCommands: CloseWindow (Закрыть окно приложения), MaximizeWindow 
    (Развернуть окно), MinimizeWindow (Свернуть окно), RestoreWindow (Восстановить окно) и т.д.

    - Команды ленты панели инструментов представлены классом RibbonCommands: AddToQuickAccessToolBar (Добавить для
    быстрого доступа), MaximizeRibbonCommand (Развернуть ленту панели инструментов) и т.д.

Это только некоторые команды. Их гораздо большн, и они охватывают множество ситуаций.
    
Источник команд

Источником команды является элемент, который вызывает команду. Однако не каждый элемент управления может быть 
    источником. Для этого он должен реализовать интерфейс ICommandSource:
	
public interface ICommandSource
{
    ICommand Command {get;}
    object CommandParameter {get;}
    IInputElement CommandTarget {get;}
}

    - Свойство Command представляет выполняемую команду. Однако это свойство игнорируется системой, если объект,
    реализующий интерфейс ICommand, не является наследником класса RoutedCommand.

    Как понятно из объявления интерфейса, элемент, его реализующий, может принимать только одну команду.

    - Свойство CommandParameter представляет параметр выполняемой команды - это те данные, которые передаются команде

    - Свойство CommandTarget представляет цель команды, то есть элемент, для которого выполняется команда. Нередко 
    в качестве цели команды выступает тот же самый элемент, который и вызывает команду, а свойство имеет значение null

Допустим, если у нас есть кнопка, и мы хотим к ней добавить команду ApplicationCommands.Help, то мы могли бы в коде
    XAML прописать так:    
-->
    
<Window x:Class="CommandsApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CommandsApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <!--
        <Button x:Name="helpButton" Command="ApplicationCommands.Help" Content="Help" />
        Также допустимо сокращение название команды:
        <Button x:Name="helpButton" Command="Help" Content="Help" />
        
        III
        Также мы можем определить привязку в коде XAML:
        -->
        <Button x:Name="helpButton" Command="ApplicationCommands.Help" Content="Help">
            <Button.CommandBindings>
                <CommandBinding Command="Help" Executed="CommandBinding_Executed"/>
            </Button.CommandBindings>
        </Button>

    </Grid>
</Window>
