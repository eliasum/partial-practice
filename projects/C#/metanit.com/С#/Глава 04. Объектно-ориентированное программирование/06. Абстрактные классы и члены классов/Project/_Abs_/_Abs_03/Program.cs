using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _Abs_03
{
    /*
        Абстрактные члены классов

        Кроме обычных свойств и методов абстрактный класс может иметь абстрактные члены 
        классов, которые определяются с помощью ключевого слова abstract и не имеют
        никакого функционала. В частности, абстрактными могут быть:

        Методы

        Свойства

        Индексаторы

        События

        Абстрактные члены классов не должны иметь модификатор private. При этом производный
        класс обязан переопределить и реализовать все абстрактные методы и свойства, которые 
        имеются в базовом абстрактном классе. При переопределении в производном классе такой
        метод или свойство также объявляются с модификатором override (как и при обычном
        переопределении виртуальных методов и свойств). Также следует учесть, что если
        класс имеет хотя бы одный абстрактный метод(или абстрактные свойство, индексатор, 
        событие), то этот класс должен быть определен как абстрактный.

        Абстрактные члены также, как и виртуальные, являются частью полиморфного интерфейса. 
        Но если в случае с виртуальными методами мы говорим, что класс-наследник наследует
        реализацию, то в случае с абстрактными методами наследуется интерфейс, представленный
        этими абстрактными методами.

        Абстрактные методы

        Например, выше в примере с транспортными средствами метод Move описывает передвижение
        транспортного средства. Однако различные типы транспорта перемещаются по разному - 
        едут по земле, летят по воздуху, плывут на воде и т.д. В этом случае мы можем сделать
        метод Move абстрактным, а его реализацию переложить на производные классы:
    */

    abstract class Transport
    {
        public abstract void Move();
    }
    // класс корабля
    class Ship : Transport
    {
        // мы должны реализовать все абстрактные методы и свойства базового класса
        public override void Move()
        {
            Console.WriteLine("Корабль плывет");
        }
    }
    // класс самолета
    class Aircraft : Transport
    {
        public override void Move()
        {
            Console.WriteLine("Самолет летит");
        }
    }
    // класс машины
    class Car : Transport
    {
        public override void Move()
        {
            Console.WriteLine("Машина едет");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Применение классов:

            Transport car = new Car();
            Transport ship = new Ship();
            Transport aircraft = new Aircraft();

            car.Move();         // машина едет
            ship.Move();        // корабль плывет
            aircraft.Move();    // самолет летит

            Console.ReadKey();
        }
    }
}
