using System;
using System.Threading;

/*
Синхронизация потоков

Нередко в потоках используются некоторые разделяемые ресурсы, общие для всей программы.
Это могут быть общие переменные, файлы, другие ресурсы. Например:
*/

class Program
{
    static int x = 0;

    static void Main(string[] args)
    {
        for (int i = 0; i < 5; i++)
        {
            //Делегат - это обьект указывающий на метод.
            //Здесь происходит передача метода Count() новому объекту myThread типа 
            //Thread через новый экземпляр делегата ThreadStart НЕЯВНО (сообщаем метод
            //Count() с делегатом типа ThreadStart). При создании нового потока будет
            //выполняться код из метода Count().
            //Т.е. метод, код которого должен выполняться в другом потоке, передается в 
            //качестве аргумента экземпляру делегата ThreadStart НЕЯВНО, который
            //в свою очередь передается в качестве аргумента экземпляру класса Thread:
            //метод --> экземпляр делегата ThreadStart НЕЯВНО --> объект Thread

            // создаем новый поток (здесь предположение делегата)
            Thread myThread = new Thread(Count);

            // имя нового потока
            myThread.Name = "Поток " + i.ToString();

            // запускаем новый поток
            myThread.Start();
        }

        Console.ReadLine();
    }
    public static void Count()
    {
        x = 1;
        for (int i = 1; i < 9; i++)
        {
            Console.WriteLine("{0}: {1}", Thread.CurrentThread.Name, x);
            x++;
            Thread.Sleep(100);
        }
    }
}

/*
Здесь у нас запускаются пять потоков, которые работают с общей переменной x. И мы 
предполагаем, что метод выведет все значения x от 1 до 8. И так для каждого потока.
Однако в реальности в процессе работы будет происходить переключение между потоками, 
и значение переменной x становится непредсказуемым.
*/