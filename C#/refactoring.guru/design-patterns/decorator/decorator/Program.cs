/*2024.11.27 10:42 IMM*/
/*2025.03.21 17:58 IMM*/

using System;

/*
В этом коде используется паттерн проектирования "Декоратор" (Decorator), который
позволяет динамически добавлять поведение объекту без изменения его кода. Мы создаем
базовые компоненты и "оборачиваем" их декораторами, чтобы добавлять или изменять их поведение.
*/

namespace RefactoringGuru.DesignPatterns.Composite.Conceptual
{
    // Базовый интерфейс Компонента определяет поведение, которое изменяется
    // декораторами.
    /*
    Component — это абстрактный класс, который задает интерфейс для всех компонентов,
    то есть, он определяет метод Operation(), который должны реализовать все компоненты.
    Важно, что это абстрактный класс, и метод Operation не имеет реализации, его нужно
    будет реализовать в дочерних классах.
    */
    public abstract class Component
    {
        public abstract string Operation();
    }

    // Конкретные Компоненты предоставляют реализации поведения по умолчанию.
    // Может быть несколько вариаций этих классов.
    /*
    ConcreteComponent — это конкретная реализация компонента, которая реализует 
    метод Operation(). В данном случае метод просто возвращает строку "ConcreteComponent".
    Это базовый компонент, который можно использовать "как есть".
    */
    class ConcreteComponent : Component
    {
        public override string Operation()
        {
            return "ConcreteComponent";
        }
    }

    // Базовый класс Декоратора следует тому же интерфейсу, что и другие
    // компоненты. Основная цель этого класса - определить интерфейс обёртки для
    // всех конкретных декораторов. Реализация кода обёртки по умолчанию может
    // включать в себя поле для хранения завёрнутого компонента и средства его
    // инициализации.
    /*
    Мы делаем Decorator наследником Component, потому что Decorator должен работать с любым
    объектом, который реализует интерфейс Component. Это позволяет декоратору оборачивать не
    только конкретные компоненты, но и другие декораторы.
    Если бы Decorator не наследовал Component, он не мог бы использовать те же методы и 
    поведение, которые ожидаются от объектов Component. То есть, декоратор должен быть совместим
    с теми объектами, с которыми он работает, а так как все компоненты (включая конкретные 
    компоненты и другие декораторы) должны реализовывать интерфейс Component, и декоратор
    должен следовать тому же интерфейсу.
    */
    abstract class Decorator : Component
    {
        protected Component _component;

        /*
        Это конструктор для Decorator. Он принимает объект Component в 
        качестве параметра и сохраняет его в поле _component.
        Почему мы передаем компонент в конструктор?
        Декоратор предназначен для того, чтобы оборачивать существующие компоненты. Конструктор
        принимает компонент и сохраняет его в поле _component, чтобы декоратор мог делегировать 
        вызовы методов этому компоненту. Важно, что _component может быть как конкретным 
        компонентом, так и другим декоратором, и декоратор может изменять его поведение.
        */
        public Decorator(Component component)
        {
            this._component = component;
        }

        /*
        Это метод, который позволяет изменить компонент, который оборачивает декоратор.
        Это может быть полезно, если нужно изменить поведение декоратора или заменить 
        оборачиваемый компонент в процессе работы программы.
        Почему такой метод нужен?
        Этот метод дает гибкость, позволяя в любой момент времени заменить оборачиваемый 
        компонент на другой. Например, если клиент хочет поменять поведение компонента,
        он может вызвать этот метод и передать новый компонент.
        */
        public void SetComponent(Component component)
        {
            this._component = component;
        }

        // Декоратор делегирует всю работу обёрнутому компоненту.
        /*
        Этот метод переопределяет метод Operation из класса Component. Здесь мы делегируем 
        вызов метода Operation оборачиваемому компоненту _component, если он существует.
        Почему делегируем выполнение методу оборачиваемого компонента?
        Декоратор может изменять поведение компонента, но по умолчанию он делегирует 
        выполнение этому компоненту. Это стандартное поведение для декоратора: он выполняет
        операцию на оборачиваемом объекте. Декоратор может при этом расширять, изменять или
        дополнительно обрабатывать результат работы компонента.

        Если _component существует (то есть, компонент был передан в конструктор и не был 
        изменен), мы вызываем метод Operation() этого компонента и возвращаем его результат.
        Если _component отсутствует (по какой-то причине), то мы возвращаем пустую строку 
        (это на случай, если компонент не был инициализирован).
        */
        public override string Operation()
        {
            if (this._component != null)
            {
                return this._component.Operation();
            }
            else
            {
                return string.Empty;
            }
        }
    }

    // Конкретные Декораторы вызывают обёрнутый объект и изменяют его результат
    // некоторым образом.
    class ConcreteDecoratorA : Decorator
    {
        public ConcreteDecoratorA(Component comp) : base(comp)
        {
        }

        // Декораторы могут вызывать родительскую реализацию операции, вместо
        // того, чтобы вызвать обёрнутый объект напрямую. Такой подход упрощает
        // расширение классов декораторов.
        public override string Operation()
        {
            return $"ConcreteDecoratorA({base.Operation()})";
        }
    }

    // Декораторы могут выполнять своё поведение до или после вызова обёрнутого
    // объекта.
    class ConcreteDecoratorB : Decorator
    {
        public ConcreteDecoratorB(Component comp) : base(comp)
        {
        }

        public override string Operation()
        {
            return $"ConcreteDecoratorB({base.Operation()})";
        }
    }

    public class Client
    {
        // Клиентский код работает со всеми объектами, используя интерфейс
        // Компонента. Таким образом, он остаётся независимым от конкретных
        // классов компонентов, с которыми работает.
        public void ClientCode(Component component)
        {
            Console.WriteLine("RESULT: " + component.Operation());
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Client client = new Client();

            var simple = new ConcreteComponent();
            Console.WriteLine("Client: I get a simple component:");
            client.ClientCode(simple);
            Console.WriteLine();

            // ...так и декорированные.
            //
            // Обратите внимание, что декораторы могут обёртывать не только
            // простые компоненты, но и другие декораторы.
            ConcreteDecoratorA decorator1 = new ConcreteDecoratorA(simple);
            ConcreteDecoratorB decorator2 = new ConcreteDecoratorB(decorator1);
            Console.WriteLine("Client: Now I've got a decorated component:");
            client.ClientCode(decorator2);

            Console.ReadKey();
        }
    }
}