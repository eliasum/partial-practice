/* -------------------------------------------------------------------------------------
--------------                        WARGAMING.NET                       --------------
----------------------------------------------------------------------------------------
--------------                 AUTHOR: MARYNA RYMASHEUSKAYA                  --------------
----------------------------------------------------------------------------------------
--------------                 Â© 2017 ALL RIGHTS RESERVED                 --------------
--------------------------------------------------------------------------------------*/

/* -------------------------------------------------------------------------------------
----------------------------------     VARIABLES     -----------------------------------
--------------------------------------------------------------------------------------*/

var canvasInteractive, canvasDarker, canvasMain, canvasLogo, canvasPattern, ctxPattern, canvasButton, ctxButton, w, h;

var imagesToLoad = {
    logo: "images/Logo.jpg",
    button: "images/Button.jpg",
    back: "images/Background.jpg",
    field: "images/Field.jpg",
    artaT: "images/ArtaT.jpg",
    artaB: "images/ArtaB.jpg",
    artaS: "images/ArtaS.png",
    tankBig: "images/TankBig.png",
    tankBigTow: "images/TankBigTow.png",
    tankBigCrash: "images/TankBigCrash.png",
    tankBigSha: "images/TankBigSha.png",
    tankSmall: "images/TankSmall.png",
    tankSmallTow: "images/TankSmallTow.png",
    tankSmallCrash: "images/TankSmallCrash.png",
    tankSmallSha: "images/TankSmallSha.png",
    shine: "images/Shine.jpg",
    pattern: "images/Pattern.png",
    smoke: "images/Smoke.png",
    smokeW: "images/SmokeW.png",
    explosion: "images/Explosion.png",
    bullet: "images/Bullet.png",
    crater: "images/Crater.png",
    crater2: "images/Crater2.png",
    tankShot: "images/tankShot.png",
    sparkle: "images/Sparkle.png",
    bush: "images/Bush.png",
    gun: "images/Gun.jpg",
    sparks: "images/Sparks.jpg",
    bushes: "images/Bushes.png",
};

var img_logo = {},
    img_back = {},
    img_field = {},
    img_artaT = {},
    img_artaB = {},
    img_artaS = {},
    img_tankBig = {},
    img_tankBigTow = {},
    img_tankBigCrash = {},
    img_tankBigSha = {},
    img_tankSmall = {},
    img_tankSmallTow = {},
    img_tankSmallCrash = {},
    img_tankSmallSha = {},
    img_shine = {},
    img_bullet = {},
    img_crater = {},
    img_crater2 = {},
    img_tankShot = {},
    img_tankShotS = {},
    img_smokeW = {},
    img_smoke = {},
    img_bush = {},
    img_gun = {},
    img_bush1 = {},
    img_bush2 = {},
    img_bush3 = {},
    img_bush4 = {},
    gfx_artaShine = {},
    gfx_plate = {},
    darkerImg = {},
    expImg = {},
    sparkleImg = {},
    aimPoint = {},
    gfx_aim = {},
    gfx_aimCircle = {},
    gfx_bigStroke = {},
    gfx_smallStroke = {},
    gfx_hpB = {},
    gfx_hpS = {},
    gfx_tankFire = {},
    gfx_tankFireS = {},
    gfx_artaFire = {},
    gfx_shot = {},
    gfx_hp = {};

var overFl = false,
    mousePos = {},
    autoPlayTimer = 0,
    enableAutoPlay = false,
    lightTimer = 0,
    enabledAlpha = false,
    frameNum = 1,
    sparkleFl = false,
    smokeFl = false,
    scaleCoeff = 2,
    expFl = true,
    enableAimRotation = false,
    enableShot = false,
    shotNum = 7,
    endFieldFl = true,
    enableLanding = false,
    victory = false,
    bigTankCrash = 0,
    smallTankCrash = 0,
    startAim = false,
    stopShot = true,
    gameNum = 0,
    enableRestart = false,
    restartTimer = 0;
var a = 70,
    b = 50,
    a_dx = 0,
    b_dy = 10,
    boost = 0,
    angRot = 90;

/* -------------------------------------------------------------------------------------
----------------------------------     FUNCTIONS     ----------------------------------- 
--------------------------------------------------------------------------------------*/

/* -------------------------------     START BANNER  ---------------------------------*/

function start() {
    canvasInteractive = document.querySelector("#Interactive");
    canvasDarker = document.querySelector("#Darker");
    canvasMain = document.querySelector("#Main");
    canvasLogo = document.querySelector("#Logo");
    ctxLogo = canvasLogo.getContext("2d");
    canvasButton = document.querySelector("#Button");
    ctxButton = canvasButton.getContext("2d");
    canvasPattern = document.querySelector("#Pattern");
    ctxPattern = canvasPattern.getContext("2d");
    if (document.querySelector("#age")) {
        document.querySelector("#age").style.fontFamily = font;
    }

    //
    w = canvasInteractive.width;
    h = canvasInteractive.height;

    //
    loadImages(imagesToLoad, function (imagesLoaded) {
        //
        darkerImg.canvas = canvasDarker;
        //
        img_logo.pic = imagesLoaded.logo;
        img_back.pic = imagesLoaded.back;
        img_field.pic = imagesLoaded.field;
        img_artaT.pic = imagesLoaded.artaT;
        img_artaB.pic = imagesLoaded.artaB;
        img_artaS.pic = imagesLoaded.artaS;
        img_gun.pic = imagesLoaded.gun;
        img_tankBig.pic = imagesLoaded.tankBig;
        img_tankBigTow.pic = imagesLoaded.tankBigTow;
        img_tankBigCrash.pic = imagesLoaded.tankBigCrash;
        img_tankBigSha.pic = imagesLoaded.tankBigSha;
        img_tankSmall.pic = imagesLoaded.tankSmall;
        img_tankSmallTow.pic = imagesLoaded.tankSmallTow;
        img_tankSmallCrash.pic = imagesLoaded.tankSmallCrash;
        img_tankSmallSha.pic = imagesLoaded.tankSmallSha;
        img_shine.pic = imagesLoaded.shine;
        img_bullet.pic = imagesLoaded.bullet;
        img_crater.pic = imagesLoaded.crater;
        img_crater2.pic = imagesLoaded.crater2;
        img_tankShot.pic = imagesLoaded.tankShot;
        img_tankShotS.pic = imagesLoaded.tankShot;
        img_smoke.pic = imagesLoaded.smoke;
        img_smokeW.pic = imagesLoaded.smokeW;
        img_bush.pic = imagesLoaded.bush;
        img_bush1.pic = imagesLoaded.bushes;
        img_bush2.pic = imagesLoaded.bushes;
        img_bush3.pic = imagesLoaded.bushes;
        img_bush4.pic = imagesLoaded.bushes;
        Button.pic = imagesLoaded.button;
        Pattern.pic = imagesLoaded.pattern;
        expImg.smoke = imagesLoaded.smoke;
        expImg.exp = imagesLoaded.explosion;
        expImg.sparks = imagesLoaded.sparks;
        sparkleImg.pic = imagesLoaded.sparkle;

        drawBalck();
        //
        init();
    });
}

/* -------------------------------     INIT BANNER   ---------------------------------*/
function init() {
    mousePos.x = w / 2;
    mousePos.y = h / 2;
    //
    darkerImg.alpha = 1;
    drawDarker(darkerImg);

    // LISTENERS
    canvasInteractive.addEventListener("mouseover", mOver, false);
    canvasInteractive.addEventListener("mouseout", mOut, false);
    canvasInteractive.addEventListener("click", mClick, false);
    canvasInteractive.addEventListener("mousemove", mMove, false);

    // VISIBILITY
    var visibilityChange = "visibilitychange";
    if (typeof document.hidden !== "undefined") {
        hidden = "hidden";
        visibilityChange = "visibilitychange";
    } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
    } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
    }
    document.addEventListener(visibilityChange, canvasWidthChange, false);

    Button.clickable = false;

    againPlate.width = 200;
    setAgainPlate();
    setStartPos();
    addText();
    addCraters();
    addCraters2();

    sparkleImg.timer = 0;
    sparkleImg.array = new Array();

    TweenMax.ticker.addEventListener("tick", update);
}

function setStartPos() {
    // OBJECTS INIT
    textSize.size = "bold 16pt ";
    textSize2.size = "bold 12pt ";

    Button.x = 638;
    Button.y = h / 2;
    Button.glowMax = 0;

    againPlate.x = Button.x;

    img_logo.x = 84;
    img_logo.y = h / 2;
    img_logo.scale = 1;
    img_logo.alpha = 1;

    img_back.x = w / 2;
    img_back.y = h / 2;
    img_back.scale = 1;
    img_back.alpha = 1;

    img_bush.x = 271;
    img_bush.y = 188;
    img_bush.scale = 0.6;
    img_bush.alpha = 1;

    img_field.x = w / 2;
    img_field.y = h / 2;
    img_field.scale = 1;
    img_field.alpha = 1;

    img_artaT.x = 388;
    img_artaT.y = 62;
    img_artaT.scale = 0.6;
    img_artaT.alpha = 1;
    img_artaT.rot = 0;

    img_artaB.x = 310;
    img_artaB.y = 90;
    img_artaB.scale = 0.6;
    img_artaB.alpha = 1;
    img_artaB.rot = 0;

    img_artaS.x = 142;
    img_artaS.y = 120;
    img_artaS.scale = 0.6;
    img_artaS.alpha = 1;
    img_artaS.rot = 0;

    img_gun.x = 347;
    img_gun.y = 29;
    img_gun.scale = 0.6;
    img_gun.alpha = 1;
    img_gun.rot = 4;

    gfx_artaShine.alpha = 0;

    img_tankBig.x = -100;
    img_tankBig.y = -100;
    img_tankBig.scale = 0.7;
    img_tankBig.alpha = 1;
    img_tankBig.rot = 0;

    img_tankBigTow.x = 0;
    img_tankBigTow.y = 0;
    img_tankBigTow.scale = 1;
    img_tankBigTow.alpha = 1;
    img_tankBigTow.rot = 0;

    img_tankBigCrash.x = 0;
    img_tankBigCrash.y = 0;
    img_tankBigCrash.scale = 1;
    img_tankBigCrash.alpha = 0;
    img_tankBigCrash.rot = 0;

    img_tankBigSha.x = 90;
    img_tankBigSha.y = 90;
    img_tankBigSha.scale = 1;
    img_tankBigSha.alpha = 1;
    img_tankBigSha.rot = 0;
    img_tankBigSha.distX = 0;
    img_tankBigSha.distY = 0;

    img_tankSmall.x = 90;
    img_tankSmall.y = 90;
    img_tankSmall.scale = 0.7;
    img_tankSmall.alpha = 1;
    img_tankSmall.rot = 0;

    img_tankSmallTow.x = 0;
    img_tankSmallTow.y = 0;
    img_tankSmallTow.scale = 1;
    img_tankSmallTow.alpha = 1;
    img_tankSmallTow.rot = 0;

    img_tankSmallCrash.x = -90;
    img_tankSmallCrash.y = -90;
    img_tankSmallCrash.scale = 1;
    img_tankSmallCrash.alpha = 0;
    img_tankSmallCrash.rot = 0;

    img_tankSmallSha.x = 90;
    img_tankSmallSha.y = 90;
    img_tankSmallSha.scale = 1;
    img_tankSmallSha.alpha = 1;
    img_tankSmallSha.rot = 0;
    img_tankSmallSha.distX = 0;
    img_tankSmallSha.distY = 0;

    img_shine.x = 710;
    img_shine.y = 0;
    img_shine.scale = 0.6;
    img_shine.alpha = 0.8;
    img_shine.rot = -32;

    img_bullet.x = 16;
    img_bullet.y = 8;
    img_bullet.scale = 1;
    img_bullet.alpha = 1;

    img_tankShot.x = 260;
    img_tankShot.y = 14;
    img_tankShot.scale = 1.1;
    img_tankShot.alpha = 0;
    img_tankShot.rot = 200;

    img_bush1.x = 310;
    img_bush1.y = 11;
    img_bush1.scale = 1;
    img_bush1.alpha = 1;

    img_bush2.x = 96;
    img_bush2.y = 226;
    img_bush2.scale = 1;
    img_bush2.alpha = 1;

    img_bush3.x = 370;
    img_bush3.y = 45;
    img_bush3.scale = 1;
    img_bush3.alpha = 0.7;

    img_bush4.x = 505;
    img_bush4.y = 15;
    img_bush4.scale = 1;
    img_bush4.alpha = 0.7;

    gfx_artaFire.x = 260;
    gfx_artaFire.y = 18;
    gfx_artaFire.scaleX = 0.6;
    gfx_artaFire.scaleY = 0.2;
    gfx_artaFire.alpha = 0;
    gfx_artaFire.rot = 12;

    gfx_plate.x = w + 150;
    gfx_plate.y = h / 2;
    gfx_plate.scale = 1;
    gfx_plate.alpha = 1;

    drawPatternElements();
    Pattern.tPattern.alpha = 0.6;
    Pattern.bPattern.alpha = 0;
    drawPattern(ctxPattern);

    textPlate.x = w / 2;
    textPlate.y = h / 2;

    aimPoint.x = 0;
    aimPoint.y = 0;

    gfx_aim.x = 0;
    gfx_aim.y = 0;
    gfx_aim.scale = 1;
    gfx_aim.alpha = 1;

    gfx_aimCircle.x = 0;
    gfx_aimCircle.y = 0;
    gfx_aimCircle.scaleX = 0.8;
    gfx_aimCircle.scaleY = 1;
    gfx_aimCircle.rot = -45;
    gfx_aimCircle.alpha = 1;

    gfx_bigStroke.x = 0;
    gfx_bigStroke.y = 0;
    gfx_bigStroke.scale = 1;
    gfx_bigStroke.alpha = 1;

    gfx_hpB.x = 40;
    gfx_hpB.y = 40;
    gfx_hpB.distX = 0;
    gfx_hpB.distY = 0;
    gfx_hpS.x = 70;
    gfx_hpS.y = 70;

    gfx_shot.x = 0;
    gfx_shot.y = 0;

    gfx_hp.x = 0;
    gfx_hp.y = h;

    TweenMax.to(darkerImg, 1.0, { alpha: 0, ease: Power0.easeOut, onUpdate: drawDarker, onUpdateParams: [darkerImg], delay: 0.0 });

    if (gameNum === 0) {
        TweenMax.delayedCall(0.0, startAnim);
    } else {
        TweenMax.delayedCall(0.0, field);
    }
    gameNum++;
}

/* -------------------------------   UPDATE BANNER   ---------------------------------*/
function update() {
    var ctx = canvasButton.getContext("2d");
    // CLEAR
    clearAll();
    //
    drawPics(img_back);
    drawPics(img_artaS);
    drawArtaB(img_artaB);
    drawArtaT(img_artaT);
    drawGun(img_gun);
    drawPics(img_bush);
    if (frameNum === 1) {
        drawExp();
    }
    if (frameNum === 1) {
        drawPics(img_tankShot);
    }
    drawArtaShotFire(gfx_artaFire);
    if (frameNum === 4) {
        drawSparkles();
    }
    drawArtaShine(gfx_artaShine);
    drawShine(img_shine);

    if (frameNum === 2 || frameNum === 3) {
        drawPics(img_field);
        drawBush1(img_bush1);
        drawBush2(img_bush2);
        drawBush3(img_bush3);
        drawBush4(img_bush4);
        drawSplash();
        for (var i = 0; i < craters.craterArray.length; i++) {
            drawPics(craters.craterArray[i]);
        }
        for (var i = 0; i < craters2.craterArray.length; i++) {
            drawPics(craters2.craterArray[i]);
        }
        //
        if (smokeFl) {
            drawSmoke();
        }
        drawPics(img_tankBigSha);
        drawPics(img_tankBig);
        drawBigStroke(gfx_bigStroke);
        drawPics(img_tankBigCrash);
        drawtankBigTow(img_tankBigTow);
        drawPics(img_tankSmallSha);
        drawPics(img_tankSmall);
        drawSmallStroke(gfx_smallStroke);
        drawPics(img_tankSmallCrash);
        drawtankSmallTow(img_tankSmallTow);
        drawHPBig(gfx_hpB);
        drawHPSmall(gfx_hpS);
        drawAim(gfx_aim);
        drawAimCirle(gfx_aimCircle);
        drawShot();
        drawHP(gfx_hp);
        drawBullet(img_bullet);
    }
    if (smokeFl && frameNum === 4) {
        drawSmoke();
    }
    if (frameNum > 1) {
        drawExp();
    }

    drawPlate(gfx_plate);
    for (var i = 0; i < textPlate.textArray.length; i++) {
        drawTextPlate(textPlate.textArray[i]);
    }
    for (var i = 0; i < textPlate.textArray.length - 2; i++) {
        drawTextPlate(textPlate.textArray[i]);
        textPlate.textArray[i].x = gfx_plate.x;
    }

    drawButton(ctxButton);
    drawLogo(ctxLogo, img_logo);
    //
    //obj pos
    // text
    textPlate.textArray[0].y = gfx_plate.y - 22;
    textPlate.textArray[1].y = gfx_plate.y;
    textPlate.textArray[2].y = gfx_plate.y + 22;
    textPlate.textArray[3].y = gfx_plate.y - 22;
    textPlate.textArray[4].y = gfx_plate.y;
    textPlate.textArray[5].y = gfx_plate.y + 22;
    textPlate.textArray[6].y = gfx_plate.y - 22;
    textPlate.textArray[7].y = gfx_plate.y;
    textPlate.textArray[8].y = gfx_plate.y + 22;
    textPlate.textArray[9].y = gfx_plate.y - 11;
    textPlate.textArray[10].y = gfx_plate.y + 11;

    gfx_artaShine.x = img_artaT.x - 6 * img_artaT.scale;
    gfx_artaShine.y = img_artaT.y - 14 * img_artaT.scale;
    gfx_artaShine.scale = img_artaT.scale;
    // tanks
    img_tankBigTow.x = img_tankBig.x;
    img_tankBigTow.y = img_tankBig.y;
    img_tankBigTow.scale = img_tankBig.scale;

    img_tankSmallTow.x = img_tankSmall.x - 3 + img_tankSmall.rot / 15;
    img_tankSmallTow.y = img_tankSmall.y - 8 - img_tankSmall.rot / 30;
    img_tankSmallTow.scale = img_tankSmall.scale;

    img_tankBigCrash.x = img_tankBig.x;
    img_tankBigCrash.y = img_tankBig.y;
    img_tankBigCrash.rot = img_tankBig.rot;
    img_tankBigCrash.scale = img_tankBig.scale;

    img_tankBigSha.x = img_tankBig.x - img_tankBigSha.distX;
    img_tankBigSha.y = img_tankBig.y + img_tankBigSha.distY;
    img_tankBigSha.scale = img_tankBig.scale;
    img_tankBigSha.rot = img_tankBig.rot;

    img_tankSmallCrash.x = img_tankSmall.x;
    img_tankSmallCrash.y = img_tankSmall.y;
    img_tankSmallCrash.rot = img_tankSmall.rot;
    img_tankSmallCrash.scale = img_tankSmall.scale;

    img_tankSmallSha.x = img_tankSmall.x - 3 * img_tankSmall.scale - img_tankSmallSha.distX;
    img_tankSmallSha.y = img_tankSmall.y + 3 * img_tankSmall.scale + img_tankSmallSha.distY;
    img_tankSmallSha.scale = img_tankSmall.scale;
    img_tankSmallSha.rot = img_tankSmall.rot;

    // bullet
    img_bullet.x = 20;
    img_bullet.y = 62;
    //stroke
    gfx_bigStroke.x = img_tankBig.x;
    gfx_bigStroke.y = img_tankBig.y;
    gfx_bigStroke.rot = img_tankBig.rot;
    gfx_bigStroke.scale = img_tankBig.scale;

    gfx_smallStroke.x = img_tankSmall.x;
    gfx_smallStroke.y = img_tankSmall.y;
    gfx_smallStroke.rot = img_tankSmall.rot;
    gfx_smallStroke.scale = img_tankSmall.scale;
    //hp
    gfx_hpB.scale = img_tankBig.scale;
    gfx_hpB.x = img_tankBig.x - 20 * img_tankBig.scale;
    gfx_hpB.y = img_tankBig.y - 70 * img_tankBig.scale;
    gfx_hpS.scale = img_tankSmall.scale;
    gfx_hpS.x = img_tankSmall.x - 10 * img_tankSmall.scale;
    gfx_hpS.y = img_tankSmall.y - 50 * img_tankSmall.scale;

    if (enableAimRotation === false && frameNum === 2) {
        aimPoint.x = mousePos.x;
        aimPoint.y = mousePos.y;
    }
    growAngle();

    if (enableAimRotation === true && frameNum === 2) {
        aimPoint.x = a_dx + a * Math.cos(radian(angRot + 270)) + w / 2;
        aimPoint.y = b_dy + b * Math.sin(radian(angRot + 270)) + h / 2;

        TweenMax.killTweensOf(gfx_aimCircle);
        gfx_aimCircle.scaleX = 0.9;
        gfx_aimCircle.scaleY = 1.2;
    }
    if (
        aimPoint.x > img_tankBig.x - (img_tankBig.pic.width / 2 - 10) * img_tankBig.scale &&
        aimPoint.x < img_tankBig.x + (img_tankBig.pic.width / 2 - 10) * img_tankBig.scale &&
        aimPoint.y > img_tankBig.y - (img_tankBig.pic.height / 2 - 10) * img_tankBig.scale &&
        aimPoint.y < img_tankBig.y + (img_tankBig.pic.height / 2 - 10) * img_tankBig.scale &&
        bigTankCrash < 2
    ) {
        gfx_bigStroke.alpha = 1;
    } else {
        gfx_bigStroke.alpha = 0;
    }
    if (
        aimPoint.x > img_tankSmall.x - (img_tankSmall.pic.width / 2 - 9) * img_tankSmall.scale &&
        aimPoint.x < img_tankSmall.x + (img_tankSmall.pic.width / 2 - 9) * img_tankSmall.scale &&
        aimPoint.y > img_tankSmall.y - (img_tankSmall.pic.height / 2 - 2) * img_tankSmall.scale &&
        aimPoint.y < img_tankSmall.y + (img_tankSmall.pic.height / 2 - 2) * img_tankSmall.scale &&
        smallTankCrash < 2
    ) {
        gfx_smallStroke.alpha = 1;
    } else {
        gfx_smallStroke.alpha = 0;
    }
    if (sparkleFl) {
        addSpark(w - 50, h - 0, 100, 20, -160, 0.5);
    }
    shadowDist(gfx_hpB);
    shadowDist(gfx_hpS);
    shadowDist(img_tankBigSha);
    shadowDist(img_tankSmallSha);

    if (enableAutoPlay) {
        autoPlayTimer++;
    } else {
        autoPlayTimer = 0;
    }
    if (autoPlayTimer === 760) {
        enableAutoPlay = false;
        autoPlayTimer = 0;
        if (endFieldFl) {
            stopAim();
            TweenMax.delayedCall(0.4, endField);
        }
    }
    //
    if (enableRestart) {
        restartTimer++;
    } else {
        restartTimer = 0;
    }
    if (shotNum === 7 && restartTimer === 250) {
        enableRestart = false;
        restartTimer = 0;
        //gameNum = 0;
        stopAll();
    }
    if (shotNum < 7 && restartTimer === 600) {
        enableRestart = false;
        restartTimer = 0;
        //gameNum = 0;
        stopAll();
    }
}

/* -------------------------------   ANIMATE BANNER   ---------------------------------*/

function startAnim() {
    TweenMax.to(img_gun, 2.5, { rot: 0, y: 32, ease: Power0.easeOut, delay: 0.0 });
    TweenMax.delayedCall(2.8, artaQuake);
    TweenMax.delayedCall(0.0, textPlateUp);
    TweenMax.to(darkerImg, 1.0, {
        alpha: 1,
        ease: Power0.easeOut,
        onUpdate: drawDarker,
        onUpdateParams: [darkerImg],
        delay: 4.5,
        onComplete: function () {
            field();
        },
    });
}
function field() {
    tankBigShotPos();
    tankSmallShotPos();
    smokeFl = true;
    frameNum = 2;
    enableAutoPlay = true;
    enableAimRotation = true;
    gfx_plate.x = w + 150;
    textPlate.textArray[0].alpha = 0;
    textPlate.textArray[1].alpha = 0;
    textPlate.textArray[2].alpha = 0;
    textPlate.textArray[3].alpha = 1;
    textPlate.textArray[4].alpha = 1;
    textPlate.textArray[5].alpha = 1;
    img_logo.alpha = 0;
    textPlateUp();
    scaleAim(scaleCoeff);
    TweenMax.to(darkerImg, 0.6, {
        alpha: 0,
        ease: Power0.easeOut,
        onUpdate: drawDarker,
        onUpdateParams: [darkerImg],
        delay: 0.0,
        onComplete: function () {
            startAim = true;
        },
    });
    TweenMax.to(Pattern.tPattern, 0.1, { alpha: 0, onUpdate: drawPattern, onUpdateParams: [ctxPattern], delay: 0.0 });

    moveTanks();
}
function endField() {
    enableAutoPlay = false;
    enableAimRotation = false;
    gfx_plate.x = w + 150;
    if (victory) {
        textPlate.textArray[3].alpha = 0;
        textPlate.textArray[4].alpha = 0;
        textPlate.textArray[5].alpha = 0;
        textPlate.textArray[6].alpha = 1;
        textPlate.textArray[7].alpha = 1;
        textPlate.textArray[8].alpha = 1;
    } else {
        textPlate.textArray[3].alpha = 0;
        textPlate.textArray[4].alpha = 0;
        textPlate.textArray[5].alpha = 0;
        textPlate.textArray[9].alpha = 1;
        textPlate.textArray[10].alpha = 1;
    }
    textPlateUp();
    TweenMax.delayedCall(2.1, packshot);
}
function target() {
    if (
        expX > img_tankBig.x - (img_tankBig.pic.width / 2 - 20) * img_tankBig.scale &&
        expX < img_tankBig.x + (img_tankBig.pic.width / 2 - 20) * img_tankBig.scale &&
        expY > img_tankBig.y - (img_tankBig.pic.height / 2 - 10) * img_tankBig.scale &&
        expY < img_tankBig.y + (img_tankBig.pic.height / 2 - 10) * img_tankBig.scale
    ) {
        bigTankCrash++;
        craters.craterArray[shotNum].x = -100;
        craters.craterArray[shotNum].y = -100;
        if (bigTankCrash === 1) {
            console.log(img_tankBig.x);
            TweenMax.killTweensOf(textPlate.textArray[11]);
            textPlate.textArray[11].x = img_tankBig.x + 30;
            textPlate.textArray[11].y = img_tankBig.y - 0;
            textPlate.textArray[11].alpha = 1;
            TweenMax.to(textPlate.textArray[11], 1.8, { y: textPlate.textArray[11].y - 30, alpha: 0, ease: Power1.easeOut });
        }
    } else {
        craters.craterArray[shotNum].x = expX;
        craters.craterArray[shotNum].y = expY;
        craters.craterArray[shotNum].rot = Math.round(Math.random() * 200);
        craters.craterArray[shotNum].alpha = 0.6 + Math.random() / 2.5;
        craters.craterArray[shotNum].scale = 0.6 + Math.random() / 2.5;

        craters2.craterArray[shotNum].x = expX;
        craters2.craterArray[shotNum].y = expY;
        craters2.craterArray[shotNum].rot = Math.round(Math.random() * 200);
        craters2.craterArray[shotNum].alpha = 0.6 + Math.random() / 2.5;
        craters2.craterArray[shotNum].scale = 0.6 + Math.random() / 2.5;
    }
    if (
        expX > img_tankSmall.x - (img_tankSmall.pic.width / 2 - 10) * img_tankSmall.scale &&
        expX < img_tankSmall.x + (img_tankSmall.pic.width / 2 - 10) * img_tankSmall.scale &&
        expY > img_tankSmall.y - (img_tankSmall.pic.height / 2) * img_tankSmall.scale &&
        expY < img_tankSmall.y + (img_tankSmall.pic.height / 2) * img_tankSmall.scale
    ) {
        smallTankCrash++;
        if (smallTankCrash === 1) {
            TweenMax.killTweensOf(textPlate.textArray[12]);
            textPlate.textArray[12].x = img_tankSmall.x + 20;
            textPlate.textArray[12].y = img_tankSmall.y - 0;
            textPlate.textArray[12].alpha = 1;
            TweenMax.to(textPlate.textArray[12], 1.8, { y: textPlate.textArray[12].y - 30, alpha: 0, ease: Power1.easeOut });
        }
    }
    if (bigTankCrash === 2) {
        victory = true;
        TweenMax.killTweensOf(img_tankBig);
        TweenMax.killTweensOf(img_tankBigTow);
        img_tankBig.alpha = 0;
        img_tankBigTow.alpha = 0.5;
        img_tankBigCrash.alpha = 1;
        endFieldFl = false;
        stopAim();
        TweenMax.delayedCall(0.1, endField);
    }
    if (smallTankCrash === 2) {
        victory = true;
        TweenMax.killTweensOf(img_tankSmall);
        TweenMax.killTweensOf(img_tankSmallTow);
        img_tankSmall.alpha = 0;
        img_tankSmallTow.alpha = 0.5;
        img_tankSmallCrash.alpha = 1;
        endFieldFl = false;
        stopAim();
        TweenMax.delayedCall(0.1, endField);
    }
}
function tankBigShot() {
    gfx_tankFire.alpha = 1;
    img_tankShot.alpha = 1;

    TweenMax.to(img_tankShot, 0.15, { x: img_tankShot.x + 35 * img_tankShot.scale, y: img_tankShot.y + 35 * img_tankShot.scale, alpha: 0, ease: Power2.easeOut });
    TweenMax.to(gfx_tankFire, 0.6, { x: gfx_tankFire.x + 8 * img_tankBigTow.scale, y: gfx_tankFire.y + 8 * img_tankBigTow.scale, scale: img_tankBigTow.scale * 1.7, alpha: 0, ease: Power1.easeOut });
    TweenMax.delayedCall(1, tankBigShotPos);
}
function tankBigShotPos() {
    img_tankShot.x = 62;
    img_tankShot.y = 55;
    img_tankShot.scale = img_tankBigTow.scale * 0.7;
    img_tankShot.alpha = 0;

    gfx_tankFire.x = 62;
    gfx_tankFire.y = 55;
    gfx_tankFire.scale = img_tankBigTow.scale * 0.6;
    gfx_tankFire.alpha = 0;
}
function tankSmallShot() {
    gfx_tankFireS.alpha = 1;
    img_tankShotS.alpha = 1;

    TweenMax.to(img_tankShotS, 0.15, { x: img_tankShotS.x + 18 * img_tankShotS.scale, y: img_tankShotS.y + 55 * img_tankShotS.scale, alpha: 0, ease: Power2.easeOut });
    TweenMax.to(gfx_tankFireS, 0.6, {
        x: gfx_tankFireS.x + 5 * img_tankSmallTow.scale,
        y: gfx_tankFireS.y + 18 * img_tankSmallTow.scale,
        scale: img_tankSmallTow.scale * 1.4,
        alpha: 0,
        ease: Power1.easeOut,
    });
    TweenMax.delayedCall(1, tankSmallShotPos);
}
function tankSmallShotPos() {
    img_tankShotS.x = 12;
    img_tankShotS.y = 25;
    img_tankShotS.scale = img_tankSmallTow.scale * 0.5;
    img_tankShotS.alpha = 0;

    gfx_tankFireS.x = 12;
    gfx_tankFireS.y = 29;
    gfx_tankFireS.scale = img_tankSmallTow.scale * 0.4;
    gfx_tankFireS.alpha = 0;
}
function shadowDist(obj) {
    obj.distX = (w + 200 - obj.x) / 50;
    obj.distY = obj.y / 50;
}
function stopAll() {
    smokeFl = false;
}
function packshot() {
    TweenMax.to(darkerImg, 1.0, {
        alpha: 1,
        ease: Power0.easeOut,
        onUpdate: drawDarker,
        onUpdateParams: [darkerImg],
        delay: 0.0,
        onComplete: function () {
            frameNum = 4;
            sparkleFl = false;
            smokeFl = false;
            enableLanding = true;
            img_back.x = w / 2;
            TweenMax.killTweensOf(gfx_plate);
            TweenMax.killTweensOf(img_tankBig);
            TweenMax.killTweensOf(img_tankSmall);
            gfx_plate.x = w + 150;
            img_logo.alpha = 1;
            img_shine.alpha = 0;
            img_gun.y = 32;
            img_gun.rot = 0;
            TweenMax.to(Pattern.tPattern, 0.1, { alpha: 0.6, onUpdate: drawPattern, onUpdateParams: [ctxPattern], delay: 0.0 });
            TweenMax.to(Pattern.bPattern, 0.1, { alpha: 0.6, onUpdate: drawPattern, onUpdateParams: [ctxPattern], delay: 0.0 });
            TweenMax.delayedCall(1, showButton);
            TweenMax.delayedCall(1.5, showAgainPlate);
            enableRestart = true;
            //
        },
    });
    TweenMax.to(darkerImg, 1.0, { alpha: 0, ease: Power0.easeOut, onUpdate: drawDarker, onUpdateParams: [darkerImg], delay: 1.0 });
}
function moveTanks() {
    //big
    img_tankBig.x = 190;
    img_tankBig.y = -36;
    img_tankBig.rot = 0;
    img_tankBigTow.rot = 60;
    TweenMax.to(img_tankBigTow, 2, {
        rot: 0,
        ease: Power0.easeOut,
        delay: 0,
        onComplete: function () {
            tankBigShot();
        },
    });
    TweenMax.to(img_tankBigTow, 3, { rot: -60, ease: Power0.easeOut, delay: 2.2 });
    TweenMax.to(img_tankBig, 6, {
        x: 374,
        y: 136,
        ease: Power0.easeOut,
        onComplete: function () {
            moveBigTank2();
        },
    });
    //small
    img_tankSmall.x = 420;
    img_tankSmall.y = -36;
    img_tankSmall.rot = 0;
    img_tankSmallTow.rot = -60;
    TweenMax.to(img_tankSmallTow, 1, {
        rot: 0,
        ease: Power0.easeOut,
        onComplete: function () {
            tankSmallShot();
        },
    });
    TweenMax.to(img_tankSmall, 3.0, {
        x: 475,
        y: 140,
        ease: Power0.easeOut,
        onComplete: function () {
            moveSmallTank2();
        },
    });
}
function moveSmallTank2() {
    img_tankSmall.x = 560;
    img_tankSmall.y = -30;
    img_tankSmall.rot = 0;
    img_tankSmallTow.rot = -40;
    TweenMax.to(img_tankSmallTow, 1.1, {
        rot: 0,
        ease: Power0.easeOut,
        onComplete: function () {
            tankSmallShot();
        },
    });
    //TweenMax.to(img_tankSmallTow, 2, {rot: - 50, ease:Power0.easeOut, delay:1.8});
    TweenMax.to(img_tankSmall, 3.0, {
        x: 620,
        y: 144,
        ease: Power0.easeOut,
        onComplete: function () {
            moveSmallTank3();
        },
    });
}
function moveSmallTank3() {
    img_tankSmall.x = 250;
    img_tankSmall.y = -36;
    img_tankSmall.rot = 0;
    img_tankSmallTow.rot = -60;
    TweenMax.to(img_tankSmallTow, 1, {
        rot: 0,
        ease: Power0.easeOut,
        onComplete: function () {
            tankSmallShot();
        },
    });
    TweenMax.to(img_tankSmall, 3.0, {
        x: 300,
        y: 140,
        ease: Power0.easeOut,
        onComplete: function () {
            moveSmallTank4();
        },
    });
}
function moveSmallTank4() {
    img_tankSmall.x = 585;
    img_tankSmall.y = -36;
    img_tankSmall.rot = 0;
    img_tankSmallTow.rot = -60;
    TweenMax.to(img_tankSmallTow, 1, {
        rot: 0,
        ease: Power0.easeOut,
        onComplete: function () {
            tankSmallShot();
        },
    });
    TweenMax.to(img_tankSmall, 3.0, {
        x: 640,
        y: 140,
        ease: Power0.easeOut,
        onComplete: function () {
            moveSmallTank5();
        },
    });
}
function moveSmallTank5() {
    img_tankSmall.x = 250;
    img_tankSmall.y = -36;
    img_tankSmall.rot = 0;
    img_tankSmallTow.rot = -60;
    TweenMax.to(img_tankSmallTow, 1, {
        rot: 0,
        ease: Power0.easeOut,
        onComplete: function () {
            tankSmallShot();
        },
    });
    TweenMax.to(img_tankSmall, 3.0, {
        x: 300,
        y: 140,
        ease: Power0.easeOut,
        onComplete: function () {
            moveSmallTank3();
        },
    });
}
function moveBigTank2() {
    img_tankBig.x = 400;
    img_tankBig.y = -44;
    img_tankBig.rot = 22;
    img_tankBigTow.rot = 70;
    TweenMax.to(img_tankBigTow, 2, {
        rot: 0,
        ease: Power0.easeOut,
        onComplete: function () {
            tankBigShot();
        },
    });
    TweenMax.to(img_tankBigTow, 3, { rot: 90, ease: Power0.easeOut, delay: 2.3 });
    TweenMax.to(img_tankBig, 6, {
        x: 486,
        y: 146,
        ease: Power0.easeOut,
        onComplete: function () {
            moveBigTank3();
        },
    });
}
function moveBigTank3() {
    img_tankBig.x = 574;
    img_tankBig.y = -44;
    img_tankBig.rot = 22;
    img_tankBigTow.rot = 60;
    TweenMax.to(img_tankBigTow, 2, {
        rot: 0,
        ease: Power0.easeOut,
        delay: 0,
        onComplete: function () {
            tankBigShot();
        },
    });
    TweenMax.to(img_tankBigTow, 3, { rot: -60, ease: Power0.easeOut, delay: 2.2 });
    TweenMax.to(img_tankBig, 7, { x: 650, y: 146, ease: Power0.easeOut });
}
function shot() {
    canvasInteractive.removeEventListener("mouseover", mOver, false);
    canvasInteractive.removeEventListener("mouseout", mOut, false);
    TweenMax.to(img_field, 0.05, {
        alpha: 1,
        ease: Power0.easeOut,
        delay: 0.0,
        onComplete: function () {
            canvasInteractive.addEventListener("mouseover", mOver, false);
            canvasInteractive.addEventListener("mouseout", mOut, false);
        },
    });
    if (enableShot && shotNum > 0) {
        stopShot = false;
        shotNum--;
        TweenMax.killDelayedCallsTo(addExp);
        TweenMax.killDelayedCallsTo(fieldQuake);
        dot = 0;
        TweenMax.delayedCall(0.7, addExp, [mousePos.x, mousePos.y, 1.1 + Math.random() / 2]);
        TweenMax.delayedCall(0.7, fieldQuake);
        scaleAim(scaleCoeff);

        gfx_shot.x = 700;
        gfx_shot.y = 700;
        TweenMax.to(gfx_shot, 0.7, {
            x: mousePos.x,
            y: mousePos.y,
            ease: Power0.easeOut,
            delay: 0.0,
            onComplete: function () {
                TweenMax.delayedCall(0.0, checkBush);
            },
        });
        TweenMax.to(gfx_shot, 0.2, {
            alpha: 1,
            ease: Power0.easeOut,
            delay: 0.7,
            onComplete: function () {
                stopShot = true;
            },
        });
    }
    if (shotNum === 0) {
        endFieldFl = false;
        stopAim();
        TweenMax.delayedCall(0.3, endField);
    }
}
function checkBush() {
    if (gfx_shot.x < img_bush1.x + 14 && gfx_shot.x > img_bush1.x - 14 && gfx_shot.y < img_bush1.y + 12 && gfx_shot.y > img_bush1.y - 12) {
        if (img_bush1.alpha > 0) {
            createSplash(gfx_shot.x, gfx_shot.y, 0, 50);
            img_bush1.alpha = 0;
        }
    }
    if (gfx_shot.x < img_bush2.x + 33 && gfx_shot.x > img_bush2.x - 33 && gfx_shot.y < img_bush2.y + 16 && gfx_shot.y > img_bush2.y - 16) {
        if (img_bush2.alpha > 0) {
            createSplash(gfx_shot.x, gfx_shot.y, 0, 70);
            img_bush2.alpha = 0;
        }
    }
    if (gfx_shot.x < img_bush3.x + 27 && gfx_shot.x > img_bush3.x - 27 && gfx_shot.y < img_bush3.y + 25 && gfx_shot.y > img_bush3.y - 25) {
        if (img_bush3.alpha > 0) {
            createSplash(gfx_shot.x, gfx_shot.y, 0, 80);
            img_bush3.alpha = 0;
        }
    }
    if (gfx_shot.x < img_bush4.x + 43 && gfx_shot.x > img_bush4.x - 43 && gfx_shot.y < img_bush4.y + 28 && gfx_shot.y > img_bush4.y - 28) {
        if (img_bush4.alpha > 0) {
            createSplash(gfx_shot.x, gfx_shot.y, 0, 90);
            img_bush4.alpha = 0;
        }
    }
}
function scaleAim(scaleCoeff) {
    TweenMax.killTweensOf(gfx_aimCircle);
    TweenMax.to(gfx_aimCircle, 0.1, { scaleX: 0.5 * scaleCoeff, scaleY: 0.7 * scaleCoeff, ease: Power1.easeOut, delay: 0.0 });
    TweenMax.to(gfx_aimCircle, 2.2, { scaleX: 0.6, scaleY: 0.8, ease: Power1.easeOut, delay: 0.1 });
}
function stopAim() {
    frameNum = 3;
    textPlateDown();
    TweenMax.to(gfx_aim, 0.5, { alpha: 0, ease: Power0.easeOut, delay: 0.0 });
    TweenMax.to(gfx_aimCircle, 0.5, { alpha: 0, ease: Power0.easeOut, delay: 0.0 });
    TweenMax.to(img_bullet, 0.5, { alpha: 0, ease: Power0.easeOut, delay: 0.0 });
}
function fieldQuake() {
    img_field.scale = 0.98;
    img_tankBig.scale = 0.67;
    img_tankSmall.scale = 0.67;
    img_bush1.scale = 0.94;
    img_bush2.scale = 0.94;
    img_bush3.scale = 0.94;
    img_bush4.scale = 0.94;
    TweenMax.to(img_field, 0.8, { scale: 1, ease: Elastic.easeOut });
    TweenMax.to(img_tankBig, 0.8, { scale: 0.7, ease: Elastic.easeOut });
    TweenMax.to(img_tankSmall, 0.8, { scale: 0.7, ease: Elastic.easeOut });
    TweenMax.to(img_bush1, 0.8, { scale: 1, ease: Elastic.easeOut });
    TweenMax.to(img_bush2, 0.8, { scale: 1, ease: Elastic.easeOut });
    TweenMax.to(img_bush3, 0.8, { scale: 1, ease: Elastic.easeOut });
    TweenMax.to(img_bush4, 0.8, { scale: 1, ease: Elastic.easeOut });

    for (var i = 0; i < 7; i++) {
        craters.craterArray[i].scale = craters.craterArray[i].scale - 0.04;
        TweenMax.to(craters.craterArray[i], 0.8, { scale: craters.craterArray[i].scale + 0.04, ease: Elastic.easeOut });

        craters2.craterArray[i].scale = craters2.craterArray[i].scale - 0.04;
        TweenMax.to(craters2.craterArray[i], 0.8, { scale: craters2.craterArray[i].scale + 0.04, ease: Elastic.easeOut });
    }
}
function artaQuake() {
    img_tankShot.alpha = 1;
    gfx_artaShine.alpha = 1;
    gfx_artaFire.alpha = 1;
    //shot
    TweenMax.to(img_tankShot, 0.1, { x: img_tankShot.x - 90, y: img_tankShot.y - 34, scale: 0.4, ease: Power0.easeOut });
    TweenMax.to(gfx_artaFire, 0.1, { x: gfx_artaFire.x - 40, y: gfx_artaFire.y - 14, scaleX: 1.2, scaleY: 0.4, ease: Power0.easeOut });
    TweenMax.to(gfx_artaFire, 0.2, { alpha: 0, ease: Power0.easeOut, delay: 0.1 });
    // quake
    TweenMax.to(img_back, 1.0, { x: img_back.x + 6, y: img_back.y + 0, ease: Elastic.easeOut });
    TweenMax.to(img_artaT, 1.0, { x: img_artaT.x + 6, y: img_artaT.y + 0, ease: Elastic.easeOut });
    TweenMax.to(img_artaB, 1.0, { x: img_artaB.x + 6, y: img_artaB.y + 0, ease: Elastic.easeOut });
    TweenMax.to(img_gun, 1.0, { x: img_gun.x + 6, y: img_gun.y + 0, ease: Elastic.easeOut });
    TweenMax.to(img_shine, 1.0, { x: img_shine.x + 6, y: img_shine.y + 0, ease: Elastic.easeOut });
    TweenMax.to(img_bush, 1.0, { x: img_bush.x + 6, y: img_bush.y + 0, ease: Elastic.easeOut });
    // light
    TweenMax.to(gfx_artaShine, 0.2, { alpha: 0, ease: Power0.easeOut, delay: 0.01 });
    // tilt
    TweenMax.to(img_artaT, 0.1, { rot: 0.6, ease: Power0.easeOut, delay: 0.0 });
    TweenMax.to(img_artaT, 1.9, { rot: 0, ease: Elastic.easeOut, delay: 0.1 });
    TweenMax.to(img_gun, 0.1, { rot: 1.2, ease: Power0.easeOut, delay: 0.0 });
    TweenMax.to(img_gun, 1.9, { rot: 0, ease: Elastic.easeOut, delay: 0.1 });
    //
    addExp(260, 14, 0.9);
}
function textPlateUp() {
    TweenMax.killTweensOf(gfx_plate);
    TweenMax.to(gfx_plate, 0.4, { x: w - 110, ease: Power2.easeOut, delay: 0.0 });
}
function textPlateDown() {
    TweenMax.killTweensOf(gfx_plate);
    TweenMax.to(gfx_plate, 0.3, { x: w + 150, ease: Power2.easeOut, delay: 0.0 });
}

function restartBanner() {
    hideButton();
    hideAgainPlate();
    enableRestart = false;
    restartTimer = 0;
    TweenMax.to(darkerImg, 0.6, {
        alpha: 1,
        ease: Power0.easeOut,
        onUpdate: drawDarker,
        onUpdateParams: [darkerImg],
        delay: 0.0,
        onComplete: function () {
            if (shotNum === 7) {
                gameNum = 0;
            }
            TweenMax.killAll();
            autoPlayTimer = 0;
            enableAutoPlay = false;
            lightTimer = 0;
            enabledAlpha = false;
            frameNum = 1;
            expFl = true;
            enableAimRotation = false;
            enableShot = false;
            shotNum = 7;
            endFieldFl = true;
            enableLanding = false;
            victory = false;
            bigTankCrash = 0;
            smallTankCrash = 0;
            sparkleFl = false;
            smokeFl = false;
            scaleCoeff = 2;
            hpWBig = 40;
            hpWSmall = 40;
            startAim = false;
            dot = 0;
            stopShot = true;
            enableRestart = false;
            restartTimer = 0;

            textPlate.textArray[0].alpha = 1;
            textPlate.textArray[1].alpha = 1;
            textPlate.textArray[2].alpha = 1;
            textPlate.textArray[6].alpha = 0;
            textPlate.textArray[7].alpha = 0;
            textPlate.textArray[8].alpha = 0;
            textPlate.textArray[9].alpha = 0;
            textPlate.textArray[10].alpha = 0;
            textPlate.textArray[11].alpha = 0;
            textPlate.textArray[12].alpha = 0;

            for (var i = 0; i < 7; i++) {
                craters.craterArray[i].x = -90;
                craters.craterArray[i].y = -90;
                craters2.craterArray[i].x = -90;
                craters2.craterArray[i].y = -90;
            }

            TweenMax.delayedCall(0.5, setStartPos);
        },
    });
}

/* -------------------------------------------------------------------------------------
----------------------------------      SERVICE      ----------------------------------- 
--------------------------------------------------------------------------------------*/

function trueAlpha(alpha) {
    if (alpha > 1) {
        return 1;
    } else if (alpha < 0) {
        return 0;
    } else {
        return Math.round(alpha * 100) / 100;
    }
}

function mOver() {
    overFl = true;
    if (frameNum === 2) {
        enableAimRotation = false;
        textPlateDown();
        //console.log("down")
    }
}

function mOut() {
    overFl = false;
    if (frameNum === 2) {
        enableAimRotation = true;
        textPlateUp();
    }
}

function mMove(evt) {
    mousePos = getMousePos(evt);
    if (frameNum === 2) {
        enableAimRotation = false;
        scaleAim(scaleNum);
    }
    if (gfx_plate.x < w + 150 && frameNum === 2) {
        textPlateDown();
    }
    //
    if (Button.isOver === true) {
        canvasInteractive.style.cursor = "pointer";
    }
    if (Button.isOver === false) {
        canvasInteractive.style.cursor = "auto";
    }
    mouseM();
    if (frameNum === 2) {
        canvasInteractive.style.cursor = "none";
    }
}
var aimNR = 60;
var aimR = 40;
var dx = 0;
var dy = 0;
var scaleNum = 0;
function mouseM() {
    for (var i = 0; i < 30; i++) {
        aimNR += (Math.abs(mousePos.x - dx) + Math.abs(mousePos.y - dy)) / 70;

        aimNR = aimNR + (aimR - aimNR) / 400;
    }
    dx = mousePos.x;
    dy = mousePos.y;
    scaleNum = 1 + aimNR / 100;
}

// MOUSE CLICK
function mClick(e) {
    if (frameNum === 2) {
        shot();
    }
    if (againPlate.isOver == false && enableLanding) {
        setURL();
    }
}

// GO TO URL
function setURL() {
    window.open(window.clickTag);
}

// GET URL CLICKTAG FOR YANDEX
function getUrlParam(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

// GET MOUSE COORDINATES
function getMousePos(e) {
    var rect = canvasInteractive.getBoundingClientRect();
    return {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top,
    };
}

// LOADING IMAGES
function loadImages(imagesToBeLoaded, drawCallback) {
    var imagesLoaded = {};
    var loadedImages = 0;
    var numberOfImagesToLoad = 0;
    //
    for (var name in imagesToBeLoaded) {
        numberOfImagesToLoad++;
    }

    for (var name in imagesToBeLoaded) {
        imagesLoaded[name] = new Image();
        imagesLoaded[name].crossOrigin = "Anonymous";
        imagesLoaded[name].onload = function () {
            if (++loadedImages >= numberOfImagesToLoad) {
                drawCallback(imagesLoaded);
            }
        };
        //
        imagesLoaded[name].src = imagesToBeLoaded[name];
    }
}

// DISABLING BUG IN CHROME TAB
function canvasWidthChange() {
    canvasMain.width = canvasMain.width + 1;
    canvasMain.width = canvasMain.width - 1;
    if (document[hidden]) {
        TweenLite.ticker.removeEventListener("tick", update);
        TweenMax.pauseAll();
    } else {
        TweenMax.resumeAll();
        TweenLite.ticker.addEventListener("tick", update);
    }
}

// CLEAR ANY CANVAS
function clearCanvas(canv) {
    var ctx = canv.getContext("2d");
    //
    ctx.clearRect(0, 0, w, h);
}

// CLEAR ALL ACTIVE CANVASES
function clearAll() {
    clearCanvas(canvasMain);
    clearCanvas(canvasLogo);
    clearCanvas(canvasButton);
}

// CONVERT DEGREES TO RADIANS
function radian(a) {
    return (a * Math.PI) / 180;
}
function growAngle() {
    angRot += boost / 1.5;
    //
    if (angRot < 180) {
        boost = angRot / 50 + 2;
    } else if (angRot >= 180 && angRot < 360) {
        boost = (360 - angRot) / 50 + 2;
    } else {
        angRot = 0;
    }
}

/* -------------------------------------------------------------------------------------
----------------------------------      ACTIONS      ----------------------------------- 
--------------------------------------------------------------------------------------*/

//
window.onLoad = loadFonts();
