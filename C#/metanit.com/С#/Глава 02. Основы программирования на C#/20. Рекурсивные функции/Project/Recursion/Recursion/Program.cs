/*2020.07.11 18:15 IMM*/

using System;

namespace Recursion
{
    class Program
    {
        //Рекурсивные функции

        //Отдельно остановимся на рекурсивных функциях. Рекурсивная функция
        //представляет такую конструкцию, при которой функция вызывает саму себя.

        //Возьмем, к примеру, вычисление факториала, которое использует формулу
        //n! = 1 * 2 * … * n. Например, факториал числа 5 равен 120 = 1 * 2 * 3 * 4 * 5.

        //Определим метод для нахождения факториала:

        static int Factorial(int x)
        {
            if (x == 0)
            {
                return 1;
            }
            if (x > 0)
            {
                return x * Factorial(x - 1);
            }
            else
            {
                return 0;
            }
        }

        static void Main(string[] args)
        {
            Console.WriteLine($"Factorial(5) = {Factorial(5)}");

            Console.ReadKey();
        }
    }
}

//Итак, здесь у нас задается условие, что если вводимое число не равно 0, 
//то мы умножаем данное число на результат этой же функции, в которую в 
//качестве параметра передается число x-1. То есть происходит рекурсивный
//спуск. И так, пока не дойдем того момента, когда значение параметра не 
//будет равно единице.

//При создании рекурсивной функции в ней обязательно должен быть некоторый 
//базовый вариант, который использует оператор return и помещается в начале
//функции. В случае с факториалом это if (x == 0) return 1;.

//И, кроме того, все рекурсивные вызовы должны обращаться к подфункциям, 
//которые в конце концов сходятся к базовому варианту. Так, при передаче в 
//функцию положительного числа при дальнейших рекурсивных вызовах подфункций
//в них будет передаваться каждый раз число, меньшее на единицу. И в конце
//концов мы дойдем до ситуации, когда число будет равно 0, и будет 
//использован базовый вариант.