/*2022.01.10 20:54 IMM*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _Abs_
{

    //    Абстрактные классы и члены классов

    //Абстрактные классы

    //Кроме обычных классов в C# есть абстрактные классы. Зачем они нужны? Классы обычно 
    //представляют некий план определенного рода объектов или сущностей. Например, мы 
    //можем определить класс Car для представления машин или класс Person для представления
    //людей, вложив в эти классы соответствующие свойства, поля, методы, которые будут 
    //описывать данные объекты. Однако некоторые сущности, которые мы хотим выразить с 
    //помощью языка программирования, могут не иметь конкретного воплощения. Например, 
    //в реальности не существует геометрической фигуры как таковой. Есть круг,
    //прямоугольник, квадрат, но просто фигуры нет. Однако же и круг, и прямоугольник 
    //имеют что-то общее и являются фигурами. И для описания подобных сущностей, которые 
    //не имеют конкретного воплощения, предназначены абстрактные классы.

    //Абстрактный класс похож на обычный класс. Он также может иметь переменные, методы,
    //конструкторы, свойства. Единственное, что при определении абстрактных классов
    //используется ключевое слово abstract. Например, определим абстрактный класс, который 
    //представляет некое транспортное средство:

    abstract class Transport
    {
        public void Move()
        {
            Console.WriteLine("Транспортно средство движется");
        }
    }

    //Транспортное средство представляет некоторую абстракцию, которая не имеет 
    //конкретного воплощения. То есть есть легковые и грузовые машины, смолеты, морские 
    //судна, кто-то на космическом корабле любит покататься, но как такового транспортного
    //средства нет. Тем не менее все транспортные средства имеют нечто общее - они могут
    //перемещаться. И для этого в классе определен метод Move, который эмулирует перемещение.

    // Но главное отличие абстрактных классов от обычных состоит в том, что мы НЕ можем 
    //использовать конструктор абстрактного класса для создания экземпляра класса. Например,
    //следующим образом:

    //Transport tesla = new Transport();

    //Тем не менее абстрактные классы полезны для описания некоторого общего функционала, 
    //который могут наследовать и использовать производные классы:

    // класс корабля
    class Ship : Transport { }
    // класс самолета
    class Aircraft : Transport { }
    // класс машины
    class Car : Transport { }

    class Program
    {
        static void Main(string[] args)
        {
            Transport car = new Car();
            Transport ship = new Ship();
            Transport aircraft = new Aircraft();

            car.Move();
            ship.Move();
            aircraft.Move();

            Console.ReadKey();
        }
    }
}
/*
В данном случае от класса Transport наследуются три класса, которые представляют
различные типы транспортных средств. Тем не менее они имеют общую черту - они могут
перемещаться с помощью метода Move().
*/
