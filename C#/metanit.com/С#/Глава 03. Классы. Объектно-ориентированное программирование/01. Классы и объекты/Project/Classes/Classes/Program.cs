/*2020.07.17 00:05 IMM*/

//Классы. Объектно-ориентированное программирование

//Классы и объекты

//C# является полноценным объектно-ориентированным языком. Это значит, что 
//программу на C# можно представить в виде взаимосвязанных взаимодействующих
//между собой объектов.

//Описанием объекта является класс, а объект представляет экземпляр этого 
//класса. Можно еще провести следующую аналогию. У нас у всех есть некоторое
//представление о человеке, у которого есть имя, возраст, какие-то другие
//характеристики. То есть некоторый шаблон - этот шаблон можно назвать 
//классом. Конкретное воплощение этого шаблона может отличаться, например,
//одни люди имеют одно имя, другие - другое имя. И реально существующий 
//человек (фактически экземпляр данного класса) будет представлять объект
//этого класса.

//По умолчанию проект консольного приложения уже содержит один класс Program,
//с которого и начинается выполнение программы.

//По сути класс представляет новый тип, который определяется пользователем.
//Класс определяется с помощью ключевого слова сlass:

//class Person
//{

//}

//Где определяется класс? Класс можно определять внутри пространства имен, 
//вне пространства имен, внутри другого класса. Как правило, классы помещаются
//в отдельные файлы. Но в данном случае поместим новый класс в файле, где
//располагается класс Program. То есть файл Program.cs будет выглядеть 
//следующим образом:

using System;

namespace HelloApp
{
    //Вся функциональность класса представлена его членами - полями
    //(полями называются переменные класса), свойствами, методами, событиями.
    //Например, определим в классе Person поля и метод:

    class Person
    {
        public string name;      // имя
        public int age = 18;     // возраст

        public void GetInfo()
        {
            //Console.WriteLine($"Имя: {name}  Возраст: {age}");	// support since C# 6	
            Console.WriteLine("Имя: {0}  Возраст: {1}", name, age);	// run in SharpDevelop 5.1.0
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Person tom;
        }
    }
}

//В данном случае класс Person представляет человека. Поле name хранит имя,
//а поле age - возраст человека. А метод GetInfo выводит все данные на 
//консоль. Чтобы все данные были доступны вне класса Person, переменные и 
//метод определены с модификатором public. Поскольку поля фактически те же
//переменные, им можно присвоить начальные значения, как в случае выше,
//поле age инициализировано значением 18.

//Так как класс представляет собой новый тип, то в программе мы можем 
//определять переменные, которые представляют данный тип. Так, здесь в 
//методе Main определена переменная tom, которая представляет класс Person.
//Но пока эта переменная не указывает ни на какой объект и по умолчанию она
//имеет значение null. Поэтому вначале необходимо создать объект класса Person.

//Конструкторы

//Кроме обычных методов в классах используются также и специальные методы, 
//которые называются конструкторами. Конструкторы вызываются при создании 
//нового объекта данного класса. Конструкторы выполняют инициализацию объекта.