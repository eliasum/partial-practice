/*2020.07.17 00:19 IMM*/

using System;

namespace Classes02
{
    //Конструктор по умолчанию

    //Если в классе не определено ни одного конструктора, то для этого класса
    //автоматически создается конструктор по умолчанию. Такой конструктор не имеет
    //параметров и не имеет тела.

    //Выше класс Person не имеет никаких конструкторов. Поэтому для него 
    //автоматически создается конструктор по умолчанию. И мы можем использовать
    //этот конструктор. В частности, создадим один объект класса Person:

    class Person
    {
        public string name; // имя
        public int age;     // возраст

        public void GetInfo()
        {
            //Console.WriteLine($"Имя: {name}  Возраст: {age}");	// support since C# 6	
            Console.WriteLine("Имя: {0}  Возраст: {1}", name, age);	// run in SharpDevelop 5.1.0
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            /*
            Создаем новый экземпляр класса Person с помощью конструктора 
            по умолчанию и присваиваем ссылку на него переменной tom 
            типа Person
            */
            Person tom = new Person();
            tom.GetInfo();      // Имя: Возраст: 0

            tom.name = "Tom";
            tom.age = 34;
            tom.GetInfo();  // Имя: Tom Возраст: 34
            Console.ReadKey();
        }
    }
}

//Для создания объекта Person используется выражение new Person(). Оператор new выделяет
//память для объекта Person. И затем вызывается конструктор по умолчанию, который не
//принимает никаких параметров. В итоге после выполнения данного выражения в памяти
//будет выделен участок, где будут храниться все данные объекта Person. А переменная 
//tom получит ссылку на созданный объект.

//Если конструктор не инициализирует значения переменных объекта, то они получают 
//значения по умолчанию. Для переменных числовых типов это число 0, а для типа 
//string и классов - это значение null (то есть фактически отсутствие значения).

//После создания объекта мы можем обратиться к переменным объекта Person через 
//переменную tom и установить или получить их значения, например, tom.name = "Tom";.

//Консольный вывод данной программы:

//Имя:	Возраст: 0
//Имя: Tom Возраст: 34

