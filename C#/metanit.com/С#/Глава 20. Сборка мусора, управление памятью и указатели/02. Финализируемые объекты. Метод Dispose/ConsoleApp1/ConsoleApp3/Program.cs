/*2020.10.20 17:19 IMM*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3
{
    /*
    Комбинирование подходов

    Мы рассмотрели два подхода. Какой же из них лучше? С одной стороны,
    метод Dispose позволяет в любой момент времени вызвать освобождение 
    связанных ресурсов, а с другой - программист, использующий наш класс,
    может забыть поставить в коде вызова метода Dispose. В общем бывают 
    различные ситуации. И чтобы сочетать плюсы обоих подходов мы можем
    использовать комбинированный подход. Microsoft предлагает нам 
    использовать следующий формализованный шаблон:
    */

    /*
    Интерфейс IDisposable предоставляет механизм для освобождения
    неуправляемых ресурсов.
    */
    public class SomeClass : IDisposable
    {
        private bool disposed = false;

        // реализация интерфейса IDisposable.
        /*
        Выполняет определяемые приложением задачи, связанные с 
        удалением, высвобождением или сбросом неуправляемых ресурсов.
        */

        public void Dispose()
        {
            Dispose(true);

            // подавляем финализацию
            /*
            Еще один важный момент - вызов в методе Dispose метода
            GC.SuppressFinalize(this). GC.SuppressFinalize не позволяет
            системе выполнить метод Finalize для данного объекта.

            Таким образом, даже если разработчик не использует в программе
            метод Dispose, все равно произойдет очистка и освобождение 
            ресурсов.
            */
            GC.SuppressFinalize(this);
        }

        /*
        Логика очистки реализуется перегруженной версией метода 
        Dispose(bool disposing). При вызове деструктора в качестве 
        параметра disposing передается значение false, чтобы избежать
        очистки управляемых ресурсов, так как мы не можем быть 
        уверенными в их состоянии, что они до сих пор находятся в
        памяти. И в этом случае остается полагаться на деструкторы 
        этих ресурсов. Ну и в обоих случаях освобождаются 
        неуправляемые ресурсы.
        */
        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // Освобождаем управляемые ресурсы
                }
                // освобождаем неуправляемые объекты
                disposed = true;
            }
        }

        // Деструктор
        ~SomeClass()
        {
            Dispose(false);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
        }
    }
}

/*
Общие рекомендации по использованию Finalize и Dispose

    - Деструктор следует реализовывать только у тех объектов, которым
    он действительно необходим, так как метод Finalize оказывает 
    сильное влияние на производительность

    - После вызова метода Dispose необходимо блокировать у объекта вызов
    метода Finalize с помощью GC.SuppressFinalize

    - При создании производных классов от базовых, которые реализуют 
    интерфейс IDisposable, следует также вызывать метод Dispose 
    базового класса:
      	
    public class Derived: Base
    {
        private bool IsDisposed = false;
     
        protected override void Dispose(bool disposing)
        {
            if (IsDisposed) return;
            if (disposing)
            {
                // Освобождение управляемых ресурсов
            }
            IsDisposed = true;
            // Обращение к методу Dispose базового класса
            base.Dispose(disposing);
        }
    }

    Отдавайте предпочтение комбинированному шаблону, реализующему как 
    метод Dispose, так и деструктор
*/
