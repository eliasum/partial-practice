using System;

namespace Project
{
    class Program
    {
        /*
Делегаты, события и лямбды

Делегаты

Делегаты представляют такие объекты, которые указывают на методы. То есть делегаты - 
это указатели на методы и с помощью делегатов мы можем вызвать данные методы.

Определение делегатов

Для объявления делегата используется ключевое слово delegate, после которого идет 
возвращаемый тип, название и параметры. Например:
	
delegate void Message();

Делегат Message в качестве возвращаемого типа имеет тип void (то есть ничего 
не возвращает) и не принимает никаких параметров. Это значит, что этот делегат может 
указывать на любой метод, который не принимает никаких параметров и ничего не возвращает.

Рассмотрим примение этого делегата:
*/
        // Здесь сначала мы определяем делегат:
        delegate void Message(); // 1. Объявляем делегат

        static void Main(string[] args)
        {
            /*
            В данном случае делегат определяется внутри класса, но также можно определить
            делегат вне класса внутри пространства имен.

            Для использования делегата объявляется переменная этого делегата:
            */
            Message mes; // 2. Создаем переменную делегата
            /*
            С помощью свойства DateTime.Now.Hour получаем текущий час. И в зависимости от 
            времени в делегат передается адрес определенного метода. Обратите внимание, что
            методы эти имеют то же возвращаемое значение и тот же набор параметров (в данном
            случае отсутствие параметров), что и делегат.
            */
            if (DateTime.Now.Hour < 12)
            {
                mes = GoodMorning; // 3. Присваиваем этой переменной адрес метода
            }
            else
            {
                mes = GoodEvening;
            }

            // Затем через делегат вызываем метод, на который ссылается данный делегат:
            mes(); // 4. Вызываем метод
            Console.ReadKey();
        }
        private static void GoodMorning()
        {
            Console.WriteLine("Good Morning");
        }
        private static void GoodEvening()
        {
            Console.WriteLine("Good Evening");
        }
    }
}
