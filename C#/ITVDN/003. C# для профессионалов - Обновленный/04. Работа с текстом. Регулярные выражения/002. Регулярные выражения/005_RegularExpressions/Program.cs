using System;
using System.Text.RegularExpressions;

// Регулярные выражения.

/*
  
   МЕТАСИМВОЛЫ - это символы для составления Шаблона поиска.
       
  \d    Определяет символы цифр. 
  \D 	Определяет любой символ, который не является цифрой. 
  \w 	Определяет любой символ цифры, буквы или подчеркивания. 
  \W    Определяет любой символ, который не является цифрой, буквой или подчеркиванием. 
  \s 	Определяет любой непечатный символ, включая пробел. 
  \S 	Определяет любой символ, кроме символов табуляции, новой строки и возврата каретки.
   .    Определяет любой символ кроме символа новой строки. 
  \.    Определяет символ точки.
 
  
  КВАНТИФИКАТОРЫ - это символы которые определяют, где и сколько раз необходимое 
  вхождение символов может встречаться.
 
  ^ - c начала строки. 
  $ - с конца строки. 
  + - одно и более вхождений подшаблона в строке.  
 
 */

namespace RegularExpressions5
{
    class Program
    {
        static void Main()
        {
            Regex regex;
            string pattern; // шаблон
            string text;    // Анализируемая строка

            /*------------------------------------1-------------------------------------
            Шаблон "^[qwerty]+$" - с начала строки ^ до конца строки $ один или более
            + символов ТОЛЬКО из набора символов [qwerty] должны встречаться
            */
            // Возможно указать необходимые символы между скобок [].
            pattern = "^[qwerty]+$";
            text = "qwec"; // false
            //text = "qwe"; // true

            // Создаем экземпляр класса Regex и передаем в качестве аргумента 
            //конструктора шаблон pattern.
            regex = new Regex(pattern);

            /*
            public bool IsMatch(string input);
            Указывает, обнаружено ли в указанной входной строке соответствие регулярному
            выражению, заданному в конструкторе System.Text.RegularExpressions.Regex.
            */
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));
            //--------------------------------------------------------------------------

            /*------------------------------------2-------------------------------------
            Шаблон "^[qwerty]+$" - с начала строки ^ до конца строки $ один или более
            + символов ТОЛЬКО из набора символов [qwerty] должны встречаться
            */
            // Строка может состоять только из символов - [qwerty]. Например:  
            //qqq, yyqyqyyyq, eeer ...
            pattern = "^[qwerty]+$";
            text = "qrwere";  // Анализируемая строка.

            // Создаем экземпляр класса Regex и передаем в качестве аргумента 
            //конструктора шаблон pattern.
            regex = new Regex(pattern);

            /*
            public bool IsMatch(string input);
            Указывает, обнаружено ли в указанной входной строке соответствие регулярному
            выражению, заданному в конструкторе System.Text.RegularExpressions.Regex.
            */
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));
            //--------------------------------------------------------------------------

            /*------------------------------------3-------------------------------------
            Шаблон "^[abcdefghigklmnopqrstuvwxyz]+$" - с начала строки ^ до конца 
            строки $ один или более + символов ТОЛЬКО из набора символов 
            [abcdefghigklmnopqrstuvwxyz] должны встречаться
            */
            pattern = "^[abcdefghigklmnopqrstuvwxyz]+$";
            text = "test"; // Анализируемая строка.

            // Создаем экземпляр класса Regex и передаем в качестве аргумента 
            //конструктора шаблон pattern.
            regex = new Regex(pattern);

            /*
            public bool IsMatch(string input);
            Указывает, обнаружено ли в указанной входной строке соответствие регулярному
            выражению, заданному в конструкторе System.Text.RegularExpressions.Regex.
            */
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));
            //--------------------------------------------------------------------------

            /*------------------------------------4-------------------------------------
            Шаблон  @"^[a-z]+$" - более короткий аналог шаблона 
            "^[abcdefghigklmnopqrstuvwxyz]+$"
            */
            // Второй способ, a-z это замена более длинного шаблона
            //abcdefghigklmnopqrstuvwxyz
            pattern = @"^[a-z]+$";
            text = "test"; // Анализируемая строка.

            // Создаем экземпляр класса Regex и передаем в качестве аргумента 
            //конструктора шаблон pattern.
            regex = new Regex(pattern);

            /*
            public bool IsMatch(string input);
            Указывает, обнаружено ли в указанной входной строке соответствие регулярному
            выражению, заданному в конструкторе System.Text.RegularExpressions.Regex.
            */
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));
            //--------------------------------------------------------------------------

            /*------------------------------------5-------------------------------------
            Шаблон  "^[a-z0-9]+$" - строка может состоять только букв латинского алфавита
            и цифр 0...9
            */
            // 0-9 это замена 01234567890.
            pattern = "^[a-z0-9]+$";
            text = "test007"; // Анализируемая строка.
            regex = new Regex(pattern);
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));
            //--------------------------------------------------------------------------

            // 0-9 это замена 01234567890.
            pattern = "^[a-z0-9]+$";
            //pattern = "^[a-z0-9 ]+$";
            text = "test 007"; // false, т.к. есть пробел
            regex = new Regex(pattern);
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));

            // Шаблон даты.
            pattern = @"^\d{2}-\d{2}-\d{4}$";
            text = "02-05-1982"; // Анализируемая строка.
            regex = new Regex(pattern);
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));

            // Квантификатор * значит, что вхождение ТОЛЬКО цифры 0 и более раз...
            pattern = @"^\d*$";
            text = "ertty"; // Анализируемая строка.
            regex = new Regex(pattern);
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));

            // Квантификатор * значит, что вхождение ТОЛЬКО цифры 0 и более раз...
            pattern = @"^\d*$";
            text = ""; // Анализируемая строка.
            regex = new Regex(pattern);
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));

            /*
            Шаблон -  @"^[0-9a-z_-]+@[\S]+\.\S{2,4}$":
            - до символа @ встречаются ТОЛЬКО
            1 или несколько символов + из набора [0-9a-z_-]+.
            - После @ встречается один или несколько + любых символов, кроме символов
            табуляции, новой строки и возврата каретки.
            - символ точки
            - после символа точки встречается от двух до четырех любых символов, кроме
            символов табуляции, новой строки и возврата каретки.
            */
            // Простой шаблон сравнения e-mail.
            pattern = @"^[0-9a-z_-]+@[\S]+\.\S{2,4}$";
            text = "test@mail123.rлu"; // Анализируемая строка.
            regex = new Regex(pattern);
            Console.WriteLine("{0} == {1} : {2}\n", text, pattern, regex.IsMatch(text));
            
            // Delay.
            Console.ReadKey();
        }
    }
}
