/*2024.11.19 17:19 IMM*/

using System;
using System.Text.RegularExpressions;

// Регулярные выражения. 

namespace RegularExpressions4
{
    class Program
    {
        static void Main()
        {
            /*
            Метод Regex.Replace заменяет в первом параметре - строке (myString) 
            подстроку соответствующую шаблону (String) во втором параметре, на 
            подстроку-вставку в третьем параметре (Test).
            Regex.Replace("myString","String","Test"); - результат myTest
            */
            // Замена подстроки соответствующей шаблону - пробелом.
            Console.WriteLine(Regex.Replace("test123aaa4x5x6bbb789ccc",  // Исходная строка.
                                            @"\d+",                      // Шаблон.
                                             " "));                      // Символ для замены.

            Console.WriteLine(Regex.Replace("test123aaa4x5x6bbb789ccc",  // Исходная строка.
                                           @"\d",                        // Шаблон.
                                            " "));                       // Символ для замены.

            /*
            Шаблонные переменные - обьявляются в текущем шаблоне таким образом:
            (?<somevar>\d+)  - объявление переменной.
            ${somevar}  -  использование шаблонных переменных в новом шаблоне.

            В этом же примере используется новая конструкция {1,2} и подобные,
            она определяет кол-во повторов нужного нам элемента(\S, \d, etc). 
            Формат: {min,max}.
            Пример: \d{2,4} - числа длиной от двух до четырёх символов (12, 123, 1234)
            12345 - уже не выходит.

            Шаблон @"(?<месяц>\d{1,2})/(?<день>\d{1,2})\/(?<год>\d{2,4})":
            (?<месяц>\d{1,2}) - переменная месяц цифрового типа, содержащая одну 
            или две цифры, далее / как в исходной строке
            (?<день>\d{1,2}) - переменная день цифрового типа, содержащая одну 
            или две цифры
            (?<год>\d{2,4}) - переменная год цифрового типа, содержащая две 
            или четыре цифры
            ${день}-${месяц}-${год} - новый формат исходной строки, на выходе 05-02-1982
            */
            Console.WriteLine(Regex.Replace("02/05/1982",                                           // Исходная строка. 5 февраля
                                           @"(?<месяц>\d{1,2})/(?<день>\d{1,2})/(?<год>\d{2,4})",  // Шаблон.
                                           //@"(?<месяц>\d{1,2})\/(?<день>\d{1,2})\/(?<год>\d{2,4})",   // Шаблон.
                                           "${день}-${месяц}-${год}"));                             // Новый формат.

            /*
            Шаблон @"test(?<var1>\d+)firststr(?<var2>\d+)secondstr":
            (?<var1>\d+) - переменная var1 цифрового типа, содержащая одну 
            или несколько цифр
            (?<var2>\d+) - переменная var2 цифрового типа, содержащая одну 
            или несколько цифр
            test${var2}firststr${var1}secondstr - новый формат исходной строки, на 
            выходе testfirststr456secondstr
            */
            Console.WriteLine(Regex.Replace(@"test123firststr456secondstr",                         // Исходная строка.
                                            @"test(?<var1>\d+)firststr(?<var2>\d+)secondstr",       // Шаблон.
                                            @"test${var2}firststr${var1}secondstr"));               // Новый формат.

            /*
            public static string Replace(string input, string pattern, MatchEvaluator evaluator);
            В указанной входной строке input заменяет все строки, соответствующие указанному
            регулярному выражению pattern, строкой, возвращенной делегатом 
            System.Text.RegularExpressions.MatchEvaluator.

            m - это public static Match Match(string input, string pattern);
            Match ищет в указанной входной строке первое вхождение заданного 
            регулярного выражения

            m => (int.Parse(m.Value) + 1).ToString())) - находим первую цифру, входящую
            в исходную строку - 5, таким образом m = 5. Cтроковая 5 парсится в цифру,
            прибавляется 1, сумма, равная 6, преобразуется в строку.

            Далее находим следующую цифру, входящую
            в исходную строку - 1, таким образом m = 1. Cтроковая 1 парсится в цифру,
            прибавляется 1, сумма, равная 2, преобразуется в строку.

            Далее находим следующую цифру, входящую
            в исходную строку - 0, таким образом m = 0. Cтроковая 0 парсится в цифру,
            прибавляется 1, сумма, равная 1, преобразуется в строку.

            В итоге строка принимает следующий вид: "6 is less than 21"
            */
            Console.WriteLine(Regex.Replace("5 is less than 10",                                    // Исходная строка.
                                            @"\d",  /* --> "6 is less than 21" */                                                  // Шаблон.
                                            //@"\d+",  /* --> "6 is less than 11" */
                                            m => (int.Parse(m.Value) + 1).ToString()));             // Функция изменения совпадения
    
            // Delay.
            Console.ReadKey();
        }
    }
}
