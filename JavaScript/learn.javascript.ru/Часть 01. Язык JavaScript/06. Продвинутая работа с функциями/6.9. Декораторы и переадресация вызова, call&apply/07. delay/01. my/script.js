/*2025.04.25 17:35 IMM*/

// Декоратор delay принимает:
// f — функцию, которую нужно задерживать
// ms — количество миллисекунд задержки
function delay(f, ms) {
  /*
  ...args — это спред-оператор, который собирает все аргументы, переданные в эту новую
   функцию, в массив. Это делается, чтобы передать их дальше в оригинальную функцию f
  */
  // Возвращаем новую функцию-обёртку
  return function (...args) {
    // Сохраняем текущий контекст (this)
    let context = this;

    /*
    setTimeout(function, time): передаем функцию, которая будет вызвана через время.
    setTimeout(f.apply(context, args), ms): немедленно выполняем f.apply(context, args)
    и передаем результат выполнения в setTimeout, что не соответствует задуманному поведению.
    */
    // Используем setTimeout для задержки выполнения
    setTimeout(function () {
      // Вызываем оригинальную функцию f
      // с сохранённым контекстом и аргументами
      f.apply(context, args);
    }, ms);
  };
}

function f(x) {
  console.log(x);
}

// создаём обёртки
let f1000 = delay(f, 1000);
let f1500 = delay(f, 1500);

f1000("test"); // показывает "test" после 1000 мс
f1500("test"); // показывает "test" после 1500 мс
