/*
Типы данных

Все используемые данные в javascript имеют определенный тип. В JavaScript имеется пять примитивных типов данных:

    String: представляет строку

    Number: представляет числовое значение

    Boolean: представляет логическое значение true или false

    undefined: указывает, что значение не установлено

    null: указывает на неопределенное значение

Все данные, которые не попадают под вышеперечисленные пять типов, относятся к типу object

Числовые данные

Числа в JavaScript могут иметь две формы:

    Целые числа, например, 35. Мы можем использовать как положительные, так и отрицательные числа. 
    Диапазон используемых чисел: от -253 до 253

    Дробные числа (числа с плавающей точкой), например, 3.5575. Опять же можно использовать как положительные,
    так и отрицательные числа. Для чисел с плавающей точкой используется тот же диапазон: от -253 до 253

Например:
*/
	
var x = 45;
var y = 23.897;
/*
В качестве разделителя между целой и дробной частями, как и в других языках программирования, используется точка.

Строки

Тип string представляет строки, то есть такие данные, которые заключены в кавычки. Например, "Привет мир".
Причем мы можем использовать как двойные, так и одинарные кавычки: "Привет мир" и 'Привет мир'. Единственное
ограничение: тип закрывающей кавычки должен быть тот же, что и тип открывающей, то есть либо обе двойные, 
либо обе одинарные.

Если внутри строки встречаются кавычки, то мы их должны экранировать слешем. Например, пусть у нас есть текст
"Бюро "Рога и копыта"". Теперь экранируем кавычки:
*/
	
var companyName = "Бюро \"Рога и копыта\"";

// Также мы можем внутри строки использовать другой тип кавычек:	
var companyName1 = "Бюро 'Рога и копыта'";
var companyName2 = 'Бюро "Рога и копыта"';
/*
Тип Boolean

Тип Boolean представляет булевые или логические значения true и false (то есть да или нет):
*/
	
var isAlive = true;
var isDead = false;
/*
null и undefined

Нередко возникает путаница между null и undefined. Итак, когда мы только определяем переменную без присвоения
ей начального значения, она представляет тип undefined:
*/
var isAlive;
console.log(isAlive); // выведет undefined
/*
Присвоение значения null означает, что переменная имеет некоторое неопределенное значение (не число, не строка,
не логическое значение), но все-таки имеет значение (undefined означает, что переменная не имеет значения):
*/
	
var isAlive;
console.log(isAlive); // undefined
isAlive = null;
console.log(isAlive); // null
isAlive = undefined;  // снова установим тип undefined
console.log(isAlive); // undefined
/*
object

Тип object представляет сложный объект. Простейшее определение объекта представляют фигурные скобки:
*/
	
var user = {};

// Объект может иметь различные свойства и методы:

var user = {name: "Tom", age:24};
console.log(user.name);
/*
В данном случае объект называется user, и он имеет два свойства: name и age. Это краткое описание объектов,
более подробное описание приводится в соответствующей главе.

Слабая типизация

JavaScript является языком со слабой типизацией. Это значит, что переменные могут динамически менять тип. Например:
*/
	
var xNumber;  // тип undefined
console.log(xNumber);
xNumber = 45;  // тип number
console.log(xNumber);
xNumber = "45"; // тип string
console.log(xNumber);
/*
Несмотря на то, что во втором и третьем случае консоль выведет нам число 45, но во втором случае переменная xNumber
будет представлять число, а в третьем случае - строку.

Это важный момент, который надо учитывать и от которого зависит поведение переменной в программе:
*/
	
var xNumber = 45;  // тип number
var yNumber = xNumber + 5;
console.log(yNumber); // 50
     
xNumber = "45"; // тип string
var zNumber = xNumber + 5;
console.log(zNumber); // 455
/*
Выше в обоих случая к переменной xNumber применяется операция сложения (+). Но в первом случае xNumber представляет
число, поэтому результатом операции xNumber + 5 будет число 50.

Во втором случае xNumber представляет строку. Но операция сложения между строкой и числом 5 невозможна. Поэтому число
5 будет преобразовываться к строке, и будет происходить операция объединения строк. И результатом выражения
xNumber + 5 будет стока "455".

Оператор typeof

С помощью оператора typeof можно получить тип переменной:
*/
	
var name = "Tom";
console.log(typeof name); // string
 
var income = 45.8;
console.log(typeof income); // number
     
var isEnabled = true;
console.log(typeof isEnabled); // boolean
 
var undefVariable;
console.log(typeof undefVariable); // undefined