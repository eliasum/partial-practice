при запуске html в брузере после 5:00 была надпис 4:98, куда делось 4:99?
Спасибо за уточнение. Проблема в том, что мы не форматируем время правильно, и когда остается меньше минуты, отображение становится некорректным. Давайте исправим это, добавив форматирование и убедившись, что все значения отображаются корректно. Вот исправленная версия функции updateCountdown:
JavaScript
function updateCountdown() {
    const currentTime = new Date();
    
    if (!updateCountdown.initialized) { 
        targetDate = new Date(currentTime.getTime() + 5 * 60000);
        console.log('Целевая дата и время (через 5 минут):', targetDate);
        updateCountdown.initialized = true;
    }

    const difference = targetDate - currentTime;
  
    if (difference <= 0) {
        clearInterval(interval);
        document.getElementById("timer").innerText = "Событие началось!";
        return;
    }

    const days = Math.floor(difference / (1000 * 60 * 60 * 24));
    const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((difference % (1000 * 60)) / 1000);
  
    // Форматируем значения, добавляя ведущий ноль, если значение меньше 10
    const formattedDays = days.toString().padStart(2, '0');
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');

    // Обновляем текст в элементе DOM
    document.getElementById("timer").innerText = 
        `${formattedDays}:${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
}

// Запускаем проверку оставшегося времени каждую секунду
const interval = setInterval(updateCountdown, 1000);

// Вызываем функцию один раз сразу, чтобы избежать задержки в отображении
updateCountdown();
Apply
Основные изменения:
1.
Мы теперь форматируем все значения (дни, часы, минуты, секунды) с помощью метода padStart(), чтобы всегда отображать двузначные числа.
2.
Вместо обновления отдельных элементов для дней, часов, минут и секунд, мы теперь обновляем один элемент с id "timer", отображая все значения в формате "дд:чч:мм:сс".
3.
Это обеспечит корректное отображение всех значений, включая переход от 5:00 к 4:59, а затем к 4:58 и так далее.
Убедитесь, что в вашем HTML файле есть элемент с id "timer":
<div id="timer"></div>
Apply
Эти изменения должны исправить проблему с отображением времени и обеспечить корректный обратный отсчет от 5:00 до 0:00.
References (3)

пропущено значение 4:99 при запуске html. Форматирование не помогло. При запуске 5:00, потом сразу 4:98. Есть ошибка в коде JS&
Вы правы, я приношу извинения за упущение. Проблема заключается в том, как мы вычисляем минуты и секунды. Давайте исправим это, чтобы обеспечить правильный обратный отсчет. Вот исправленная версия функции updateCountdown:
JavaScript
function updateCountdown() {
    const currentTime = new Date();
    
    if (!updateCountdown.initialized) { 
        targetDate = new Date(currentTime.getTime() + 5 * 60000);
        console.log('Целевая дата и время (через 5 минут):', targetDate);
        updateCountdown.initialized = true;
    }

    const difference = targetDate - currentTime;
  
    if (difference <= 0) {
        clearInterval(interval);
        document.getElementById("timer").innerText = "Событие началось!";
        return;
    }

    const totalSeconds = Math.floor(difference / 1000);
    const days = Math.floor(totalSeconds / (60 * 60 * 24));
    const hours = Math.floor((totalSeconds % (60 * 60 * 24)) / (60 * 60));
    const minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
    const seconds = totalSeconds % 60;

    // Форматируем значения, добавляя ведущий ноль, если значение меньше 10
    const formattedDays = days.toString().padStart(2, '0');
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');

    // Обновляем текст в элементах DOM с соответствующими id
    document.getElementById("days").innerText = formattedDays;
    document.getElementById("hours").innerText = formattedHours;
    document.getElementById("minutes").innerText = formattedMinutes;
    document.getElementById("seconds").innerText = formattedSeconds;

    // Альтернативно, можно обновить один элемент с полным таймером
    // document.getElementById("timer").innerText = 
    //     `${formattedDays}:${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
}

// Запускаем проверку оставшегося времени каждую секунду
const interval = setInterval(updateCountdown, 1000);

// Вызываем функцию один раз сразу, чтобы избежать задержки в отображении
updateCountdown();
Apply
Основные изменения:
1.
Мы теперь вычисляем общее количество секунд (totalSeconds) и затем используем его для расчета дней, часов, минут и секунд. Это обеспечивает более точный расчет времени.
2.
Используем операцию деления с остатком (%) для правильного вычисления часов, минут и секунд.
3.
Форматируем все значения, добавляя ведущий ноль для чисел меньше 10.
4.
Обновляем отдельные элементы DOM для дней, часов, минут и секунд. Также предоставлен закомментированный вариант для обновления одного элемента с полным таймером.
Эти изменения должны исправить проблему с пропущенным значением 4:59 и обеспечить корректный обратный отсчет от 5:00 до 0:00.
Убедитесь, что в вашем HTML файле есть соответствующие элементы:
<span id="days"></span>:
<span id="hours"></span>:
<span id="minutes"></span>:
<span id="seconds"></span>
Apply
Или, если вы предпочитаете использовать один элемент для всего таймера:
<div id="timer"></div>
Apply
Эти изменения должны решить проблему и обеспечить правильный обратный отсчет.
References (3)

работает с той же ошибкой
Я понимаю, что проблема все еще сохраняется. Давайте попробуем другой подход к решению этой проблемы. Мы изменим логику обратного отсчета, чтобы она была более точной и не пропускала значения. Вот обновленная версия JavaScript кода:
JavaScript
'use strict';

let targetDate;
let countdownInterval;

function updateCountdown() {
    const now = new Date().getTime();
    const timeLeft = targetDate - now;

    if (timeLeft <= 0) {
        clearInterval(countdownInterval);
        document.getElementById("timer").innerHTML = "Событие началось!";
        return;
    }

    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

    document.getElementById("days").textContent = days.toString().padStart(2, '0');
    document.getElementById("hours").textContent = hours.toString().padStart(2, '0');
    document.getElementById("minutes").textContent = minutes.toString().padStart(2, '0');
    document.getElementById("seconds").textContent = seconds.toString().padStart(2, '0');
}

function startCountdown() {
    // Устанавливаем целевую дату на 5 минут от текущего времени
    targetDate = new Date().getTime() + 5 * 60 * 1000;

    // Обновляем каждые 100 миллисекунд для более плавного отсчета
    countdownInterval = setInterval(updateCountdown, 100);

    // Сразу вызываем updateCountdown, чтобы избежать задержки в отображении
    updateCountdown();
}

// Запускаем отсчет при загрузке страницы
window.onload = startCountdown;
Apply
Основные изменения:
1.
Мы теперь используем Date.getTime() для работы с миллисекундами, что обеспечивает более точный расчет.
2.
Интервал обновления установлен на 100 миллисекунд вместо 1 секунды. Это делает отсчет более плавным и менее вероятным пропуск значений.
3.
Мы разделили логику на две функции: startCountdown для инициализации отсчета и updateCountdown для обновления отображения.
4.
Отсчет начинается при загрузке страницы с помощью window.onload.
5.
Мы используем textContent вместо innerText для обновления значений, что может быть немного более эффективным.
Убедитесь, что ваш HTML файл остается без изменений:
<div id="countdown">
    <p id="timer">
        <span id="days"></span>
        <span class="timer-unit">Days</span>
        <span id="hours"></span>
        <span class="timer-unit">Hours</span>
        <span id="minutes"></span>
        <span class="timer-unit">Minutes</span>
        <span id="seconds"></span>
        <span class="timer-unit">Seconds</span>
    </p>
</div>
Apply
Эти изменения должны решить проблему с пропущенными значениями и обеспечить плавный и точный обратный отсчет от 5:00 до 0:00. Пожалуйста, попробуйте этот обновленный код и дайте знать, если проблема все еще сохраняется.